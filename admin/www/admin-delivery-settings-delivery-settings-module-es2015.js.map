{"version":3,"sources":["./src/app/admin/delivery-settings/delivery-settings.page.html","./src/app/admin/delivery-settings/delivery-settings.module.ts","./src/app/admin/delivery-settings/delivery-settings.page.scss","./src/app/admin/delivery-settings/delivery-settings.page.ts"],"names":[],"mappings":"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","file":"admin-delivery-settings-delivery-settings-module-es2015.js","sourcesContent":["module.exports = \"<ion-header>\\r\\n  <ion-toolbar mode=\\\"ios\\\">\\r\\n    <ion-menu-button slot=\\\"start\\\"\\r\\n      class=\\\"menu-btn\\\">\\r\\n      <ion-icon slot=\\\"icon-only\\\"\\r\\n        name=\\\"menu\\\"></ion-icon>\\r\\n    </ion-menu-button>\\r\\n    <div class=\\\"header-logo\\\"\\r\\n      slot=\\\"start\\\"><img src=\\\"../../../assets/img/shop-logo.png\\\"></div>\\r\\n    <ion-title>Delivery Setting</ion-title>\\r\\n  </ion-toolbar>\\r\\n  <div class=\\\"header-cart-btn\\\">\\r\\n    <ion-button fill=\\\"solid\\\"\\r\\n      color=\\\"secondary\\\">\\r\\n      <span class=\\\"icon\\\"\\r\\n        slot=\\\"start\\\">\\r\\n        <i class=\\\"flaticon-null\\\"\\r\\n          slot=\\\"start\\\"></i>\\r\\n        <span class=\\\"count\\\">5</span>\\r\\n      </span>\\r\\n    </ion-button>\\r\\n    <ion-button fill=\\\"solid\\\"\\r\\n      color=\\\"secondary\\\">\\r\\n      <span class=\\\"icon\\\"\\r\\n        slot=\\\"start\\\">\\r\\n        <i class=\\\"flaticon-shopping-bag\\\"\\r\\n          slot=\\\"start\\\"></i>\\r\\n        <span class=\\\"count\\\">2</span>\\r\\n      </span>\\r\\n    </ion-button>\\r\\n  </div>\\r\\n</ion-header>\\r\\n\\r\\n<super-tabs>\\r\\n\\r\\n  <super-tabs-toolbar slot=\\\"top\\\">\\r\\n    <super-tab-button>\\r\\n      <ion-label>Settings</ion-label>\\r\\n    </super-tab-button>\\r\\n    <super-tab-button>\\r\\n      <ion-label>States / Pincodes</ion-label>\\r\\n    </super-tab-button>\\r\\n  </super-tabs-toolbar>\\r\\n\\r\\n  <super-tabs-container>\\r\\n\\r\\n    <!-- 1st Tab -->\\r\\n    <super-tab>\\r\\n      <ion-content>\\r\\n        <div class=\\\"main-container\\\"\\r\\n          style=\\\"width: 100%;\\\">\\r\\n          <ion-grid>\\r\\n            <ion-row>\\r\\n              <ion-col size=2\\r\\n                id=\\\"scroll1\\\"\\r\\n                style=\\\"margin-top: 8px;\\\">\\r\\n                <ion-button expand=\\\"block\\\"\\r\\n                  (click)=\\\"createNewDeliveryType()\\\"\\r\\n                  style=\\\"margin: 8px 0 0 8px;\\\">\\r\\n                  Add New +\\r\\n                </ion-button>\\r\\n                <div class=\\\"statusList\\\">\\r\\n                  <div *ngIf=\\\"newDeliveryType.length\\\">\\r\\n                    <p [id]=\\\"'field' + idx\\\"\\r\\n                      style=\\\"z-index: 1000\\\"\\r\\n                      *ngFor='let item of newDeliveryType; let idx=index'\\r\\n                      (click)=\\\"newSelection(idx)\\\">\\r\\n                      {{item.id}}\\r\\n                      <button *ngIf=\\\"idx != 0\\\"\\r\\n                        style=\\\"float: right; background-color: transparent; z-index: 1001;\\\">\\r\\n                        <i class=\\\"flaticon-null-17\\\"\\r\\n                          style=\\\"margin-right: 5px;\\\"\\r\\n                          (click)=\\\"removeProfile(item.id, idx)\\\"></i>\\r\\n                      </button>\\r\\n                    </p>\\r\\n                  </div>\\r\\n                </div>\\r\\n              </ion-col>\\r\\n              <ion-col size=2\\r\\n                id=\\\"scroll1\\\"\\r\\n                style=\\\"margin-top: 8px; border-left: 1px solid lightgray;\\\">\\r\\n                <div class=\\\"statusList\\\">\\r\\n                  <p [id]=\\\"i\\\"\\r\\n                    *ngFor='let item of sidemenu; let i=index'\\r\\n                    (click)='changeComponent(i)'>{{item}}</p>\\r\\n                </div>\\r\\n              </ion-col>\\r\\n              <ion-col size=8\\r\\n                style=\\\"margin-top: 8px; border-left: 1px solid lightgray;\\\"\\r\\n                id=\\\"scroll2\\\">\\r\\n                <ion-col>\\r\\n                  <ion-button (click)=\\\"saveAllDeliverySetting()\\\"\\r\\n                    color=\\\"success\\\">\\r\\n                    <i class=\\\"flaticon-null-20 margin-icon\\\"></i>&nbsp;\\r\\n                    Save\\r\\n                  </ion-button>\\r\\n                </ion-col>\\r\\n                <br>\\r\\n                <ion-col>\\r\\n                  <ion-grid [ngSwitch]=\\\"selectedId\\\">\\r\\n                    <ion-row>\\r\\n                      <ion-col size=\\\"6\\\"\\r\\n                        *ngSwitchCase=\\\"0\\\">\\r\\n                        <div class=\\\"input-wrap\\\">\\r\\n                          <ion-label>Default delivery amount ({{currencyCode}})\\r\\n                          </ion-label>\\r\\n                          <ion-input type=\\\"tel\\\"\\r\\n                            class=\\\"form-input\\\"\\r\\n                            [(ngModel)]=\\\"defaultDeliveryAmt\\\"></ion-input>\\r\\n                        </div>\\r\\n                      </ion-col>\\r\\n                      <ion-col size=\\\"6\\\"\\r\\n                        *ngSwitchCase=\\\"1\\\">\\r\\n                        <ion-col size=\\\"6\\\"\\r\\n                          *ngSwitchCase=\\\"1\\\">\\r\\n                          <div style=\\\"display: flex;align-items: center\\\">\\r\\n                            <p>Allow free delivery for order</p>&nbsp;&nbsp;\\r\\n                            <div class=\\\"toggle-btn\\\">\\r\\n                              <label class=\\\"switch\\\">\\r\\n                                <input color=\\\"primary\\\"\\r\\n                                  type=\\\"checkbox\\\"\\r\\n                                  [checked]=\\\"allowFreeDelivery\\\"\\r\\n                                  (click)=\\\"freeDeliveryToggle()\\\">\\r\\n                                <span class=\\\"slider round\\\"></span>\\r\\n                              </label>\\r\\n                            </div>\\r\\n                          </div>\\r\\n                          <br><br>\\r\\n                          <div class=\\\"input-wrap\\\"\\r\\n                            *ngIf=\\\"allowFreeDelivery == true\\\">\\r\\n                            <ion-label>Free delivery above amount\\r\\n                              ({{currencyCode}})\\r\\n                            </ion-label>\\r\\n                            <ion-input type=\\\"tel\\\"\\r\\n                              class=\\\"form-input\\\"\\r\\n                              [(ngModel)]=\\\"freeDeliveryAmt\\\"></ion-input>\\r\\n                          </div>\\r\\n                        </ion-col>\\r\\n                      </ion-col>\\r\\n                      <div *ngSwitchCase=\\\"2\\\">\\r\\n                        <ion-col size=\\\"12\\\">\\r\\n                          <div style=\\\"display: flex;align-items: center;\\\">\\r\\n                            <!-- <ion-label>Allow Store pickup</ion-label>&nbsp; -->\\r\\n                            <!-- <ion-toggle color=\\\"primary\\\"\\r\\n                              (ionChange)=\\\"storePickupToggle()\\\"\\r\\n                              [checked]=\\\"isStorePickup\\\">\\r\\n                            </ion-toggle> -->\\r\\n                            <p>Allow store pickup</p>&nbsp;&nbsp;\\r\\n                            <div class=\\\"toggle-btn\\\">\\r\\n                              <label class=\\\"switch\\\">\\r\\n                                <input color=\\\"primary\\\"\\r\\n                                  type=\\\"checkbox\\\"\\r\\n                                  [checked]=\\\"isStorePickup\\\"\\r\\n                                  (click)=\\\"storePickupToggle()\\\">\\r\\n                                <span class=\\\"slider round\\\"></span>\\r\\n                              </label>\\r\\n                            </div>\\r\\n                          </div>\\r\\n                        </ion-col>\\r\\n                        <ion-col size=\\\"12\\\"\\r\\n                          *ngIf=\\\"isStorePickup\\\">\\r\\n                          <div class=\\\"input-wrap\\\">\\r\\n                            <ion-label>Store pickup charges ({{currencyCode}})\\r\\n                            </ion-label>\\r\\n                            <ion-input type=\\\"tel\\\"\\r\\n                              class=\\\"form-input\\\"\\r\\n                              [(ngModel)]=\\\"storePickupCharges\\\"></ion-input>\\r\\n                          </div>\\r\\n                        </ion-col>\\r\\n                      </div>\\r\\n                      <div *ngSwitchCase=\\\"3\\\">\\r\\n                        <ion-col size=\\\"12\\\">\\r\\n                          <div style=\\\"display: flex;align-items: center;\\\">\\r\\n                            <div>Allow Delivery based on Km</div>&nbsp;&nbsp;\\r\\n                            <div class=\\\"toggle-btn\\\">\\r\\n                              <label class=\\\"switch\\\">\\r\\n                                <input type=\\\"checkbox\\\"\\r\\n                                  (click)=\\\"deliveryBasedToggle()\\\"\\r\\n                                  [checked]=\\\"isKmBasedDelivery\\\">\\r\\n                                <span class=\\\"slider round\\\"></span>\\r\\n                              </label>\\r\\n                            </div>\\r\\n                          </div>\\r\\n                        </ion-col>\\r\\n                        <ion-col size=\\\"12\\\"\\r\\n                          *ngIf=\\\"isKmBasedDelivery\\\">\\r\\n                          <div style=\\\"display: flex;align-items: center;\\\">\\r\\n                            <div>Delivery by Km Slabs</div>&nbsp;&nbsp;\\r\\n                            <div class=\\\"toggle-btn\\\">\\r\\n                              <label class=\\\"switch\\\">\\r\\n                                <input type=\\\"checkbox\\\"\\r\\n                                  (click)=\\\"activeKmSlab()\\\"\\r\\n                                  [checked]=\\\"kmSlabs.active\\\">\\r\\n                                <span class=\\\"slider round\\\"></span>\\r\\n                              </label>\\r\\n                            </div>\\r\\n                          </div>\\r\\n                          <br>\\r\\n                          <div *ngIf='!kmSlabs.active'>\\r\\n                            <div class=\\\"input-wrap\\\">\\r\\n                              <ion-label>Delivery Charges per km\\r\\n                                ({{currencyCode}})\\r\\n                              </ion-label>\\r\\n                              <ion-input type=\\\"tel\\\"\\r\\n                                class=\\\"form-input\\\"\\r\\n                                [(ngModel)]=\\\"chargesPerKm\\\"></ion-input>\\r\\n                            </div>\\r\\n                            <div class=\\\"input-wrap\\\">\\r\\n                              <ion-label>Maximum delivery charges\\r\\n                                ({{currencyCode}})\\r\\n                              </ion-label>\\r\\n                              <ion-input type=\\\"tel\\\"\\r\\n                                class=\\\"form-input\\\"\\r\\n                                [(ngModel)]=\\\"maxDeliveryOfKm\\\"></ion-input>\\r\\n                            </div>\\r\\n                          </div>\\r\\n                          <div *ngIf='kmSlabs.active'>\\r\\n                            <div style=\\\"display: flex;align-items: center;\\\">\\r\\n                              <ion-button (click)='enterSlabData()'>\\r\\n                                <p\\r\\n                                  *ngIf=\\\"kmSlabs.slabs && kmSlabs.slabs.length == 0\\\">\\r\\n                                  Create Slab</p>\\r\\n                                <p\\r\\n                                  *ngIf=\\\"kmSlabs.slabs && kmSlabs.slabs.length > 0\\\">\\r\\n                                  Add Slab</p>\\r\\n                              </ion-button>&nbsp;&nbsp;\\r\\n                              <ion-button (click)=\\\"removeSlabs()\\\">\\r\\n                                Remove All Slabs\\r\\n                              </ion-button>\\r\\n                            </div>\\r\\n                            <br>\\r\\n                            <ion-grid\\r\\n                              *ngIf=\\\"kmSlabs.slabs && kmSlabs.slabs.length > 0\\\"\\r\\n                              class=\\\"ion-no-padding data-table ion-text-center\\\"\\r\\n                              style=\\\"margin-top: 12px;width: 400px;\\\">\\r\\n                              <ion-row>\\r\\n                                <ion-col>Range</ion-col>\\r\\n                                <ion-col>Cost</ion-col>\\r\\n                                <ion-col>Free Delivery Amount</ion-col>\\r\\n                              </ion-row>\\r\\n                              <ion-row\\r\\n                                *ngFor=\\\"let slab of kmSlabs.slabs; let i=index;\\\"\\r\\n                                style=\\\"border-top: 1px solid lightgray;\\\">\\r\\n                                <ion-col>\\r\\n                                  <p>{{slab.range[0]}} - {{slab.range[1]}}</p>\\r\\n                                </ion-col>\\r\\n                                <ion-col>\\r\\n                                  <p>{{slab.cost}}</p>\\r\\n                                </ion-col>\\r\\n                                <ion-col>\\r\\n                                  <p>{{slab.freeDeliveryAmount}}</p>\\r\\n                                </ion-col>\\r\\n                              </ion-row>\\r\\n                            </ion-grid>\\r\\n                          </div>\\r\\n                        </ion-col>\\r\\n                      </div>\\r\\n                      <div *ngSwitchCase=\\\"4\\\">\\r\\n                        <ion-col size=\\\"6\\\"\\r\\n                          *ngIf=\\\"isDeliveryBasedOnWeight\\\">\\r\\n                          <div style=\\\"display: flex;align-items: center;\\\">\\r\\n                            <div>Delivery Based On Weight</div>&nbsp;&nbsp;\\r\\n                            <div class=\\\"toggle-btn\\\">\\r\\n                              <label class=\\\"switch\\\">\\r\\n                                <input type=\\\"checkbox\\\"\\r\\n                                  (click)=\\\"deliveryWeightBasedToggle()\\\"\\r\\n                                  [checked]=\\\"deliveryByWeight.active\\\">\\r\\n                                <span class=\\\"slider round\\\"></span>\\r\\n                              </label>\\r\\n                            </div>\\r\\n                          </div>\\r\\n                        </ion-col>\\r\\n                        <div *ngIf=\\\"isDeliveryBasedOnWeight\\\">\\r\\n                          <div *ngIf=\\\"deliveryByWeight.active\\\">\\r\\n                            <div style=\\\"display: flex;align-items: center;\\\">\\r\\n                              <div>Delivery by Weight Slabs</div>&nbsp;&nbsp;\\r\\n                              <div class=\\\"toggle-btn\\\">\\r\\n                                <label class=\\\"switch\\\">\\r\\n                                  <input type=\\\"checkbox\\\"\\r\\n                                    (click)=\\\"activeWeightSlab()\\\"\\r\\n                                    [checked]=\\\"weightSlabs.active\\\">\\r\\n                                  <span class=\\\"slider round\\\"></span>\\r\\n                                </label>\\r\\n                              </div>\\r\\n                            </div>\\r\\n                            <br>\\r\\n                            <div *ngIf='!weightSlabs.active'>\\r\\n                              <div class=\\\"input-wrap\\\">\\r\\n                                <ion-label>Charges Per 100Gm ({{currencyCode}})\\r\\n                                </ion-label>\\r\\n                                <ion-input type=\\\"number\\\"\\r\\n                                  class=\\\"input-border\\\"\\r\\n                                  [(ngModel)]=\\\"deliveryByWeight.cost\\\">\\r\\n                                </ion-input>\\r\\n                              </div>\\r\\n                              <br>\\r\\n                              <div class=\\\"ds-alignment\\\">\\r\\n                                <p class=\\\"delivery-wt-txt\\\">\\r\\n                                  Delivery weight upto\\r\\n                                  &nbsp;<ion-input type=\\\"number\\\"\\r\\n                                    class=\\\"input-border\\\"\\r\\n                                    [(ngModel)]=\\\"deliveryByWeight.baseWeight\\\">\\r\\n                                  </ion-input>\\r\\n                                  &nbsp;Grams is\\r\\n                                  {{currencyCode}}\\r\\n                                  &nbsp;<ion-input type=\\\"number\\\"\\r\\n                                    class=\\\"input-border\\\"\\r\\n                                    [(ngModel)]=\\\"deliveryByWeight.baseCost\\\">\\r\\n                                  </ion-input>\\r\\n                                </p>\\r\\n                              </div>\\r\\n                            </div>\\r\\n                            <div *ngIf='weightSlabs.active'>\\r\\n                              <div style=\\\"display: flex;align-items: center;\\\">\\r\\n                                <ion-button (click)='enterWeightSlabData()'>\\r\\n                                  <p\\r\\n                                    *ngIf=\\\"weightSlabs.slabs && weightSlabs.slabs.length == 0\\\">\\r\\n                                    Create Slab</p>\\r\\n                                  <p\\r\\n                                    *ngIf=\\\"weightSlabs.slabs && weightSlabs.slabs.length > 0\\\">\\r\\n                                    Add Slab</p>\\r\\n                                </ion-button>&nbsp;&nbsp;\\r\\n                                <ion-button (click)=\\\"removeWeightSlabs()\\\">\\r\\n                                  Remove All Slabs\\r\\n                                </ion-button>\\r\\n                              </div>\\r\\n                              <br>\\r\\n                              <ion-grid\\r\\n                                *ngIf=\\\"weightSlabs.slabs && weightSlabs.slabs.length > 0\\\"\\r\\n                                class=\\\"ion-no-padding data-table ion-text-center\\\"\\r\\n                                style=\\\"margin-top: 12px;width: 400px;\\\">\\r\\n                                <ion-row>\\r\\n                                  <ion-col>Range</ion-col>\\r\\n                                  <ion-col>Cost</ion-col>\\r\\n                                </ion-row>\\r\\n                                <ion-row\\r\\n                                  *ngFor=\\\"let slab of weightSlabs.slabs; let i=index;\\\"\\r\\n                                  style=\\\"border-top: 1px solid lightgray;\\\">\\r\\n                                  <ion-col>\\r\\n                                    <p>{{slab.range[0]}} - {{slab.range[1]}}</p>\\r\\n                                  </ion-col>\\r\\n                                  <ion-col>\\r\\n                                    <p>{{slab.cost}}</p>\\r\\n                                  </ion-col>\\r\\n                                </ion-row>\\r\\n                              </ion-grid>\\r\\n                            </div>\\r\\n                          </div>\\r\\n                        </div>\\r\\n                      </div>\\r\\n                      <div *ngSwitchCase=\\\"5\\\">\\r\\n                        <ion-col size=\\\"12\\\">\\r\\n                          <div style=\\\"display: flex;align-items: center;\\\">\\r\\n                            <!-- <ion-label>Allow Instant Delivery</ion-label>&nbsp;\\r\\n                            <ion-toggle color=\\\"primary\\\"\\r\\n                              [(ngModel)]=\\\"instantDelivery.isActive\\\"></ion-toggle> -->\\r\\n                            <p>Allow instant delivery</p>&nbsp;&nbsp;\\r\\n                            <div class=\\\"toggle-btn\\\">\\r\\n                              <label class=\\\"switch\\\">\\r\\n                                <input color=\\\"primary\\\"\\r\\n                                  type=\\\"checkbox\\\"\\r\\n                                  [checked]=\\\"instantDelivery.isActive\\\"\\r\\n                                  (click)=\\\"allowInstantDelivery()\\\">\\r\\n                                <span class=\\\"slider round\\\"></span>\\r\\n                              </label>\\r\\n                            </div>\\r\\n                          </div>\\r\\n                        </ion-col>\\r\\n                        <ion-col size=\\\"12\\\"\\r\\n                          *ngIf=\\\"instantDelivery.isActive\\\">\\r\\n                          <div class=\\\"input-wrap\\\">\\r\\n                            <ion-label>Enter Instant Delivery Time (In Hours)\\r\\n                            </ion-label>\\r\\n                            <ion-input type=\\\"number\\\"\\r\\n                              class=\\\"form-input\\\"\\r\\n                              [(ngModel)]=\\\"instantDelivery.time\\\"></ion-input>\\r\\n                          </div>\\r\\n                        </ion-col>\\r\\n                      </div>\\r\\n                      <div *ngSwitchCase=\\\"6\\\">\\r\\n                        <ion-col size=\\\"12\\\">\\r\\n                          <div style=\\\"display: flex;align-items: center;\\\">\\r\\n                            <!-- <ion-label>Allow Delivery By Store</ion-label>&nbsp;\\r\\n                            <ion-toggle color=\\\"primary\\\"\\r\\n                              [(ngModel)]=\\\"isStoreDelivery.isActive\\\"></ion-toggle> -->\\r\\n                            <p>Allow Delivery by Store</p>&nbsp;&nbsp;\\r\\n                            <div class=\\\"toggle-btn\\\">\\r\\n                              <label class=\\\"switch\\\">\\r\\n                                <input color=\\\"primary\\\"\\r\\n                                  type=\\\"checkbox\\\"\\r\\n                                  [checked]=\\\"isStoreDelivery.isActive\\\"\\r\\n                                  (click)=\\\"allowDeliverybyStore()\\\">\\r\\n                                <span class=\\\"slider round\\\"></span>\\r\\n                              </label>\\r\\n                            </div>\\r\\n                          </div>\\r\\n                        </ion-col>\\r\\n                        <ion-col size=\\\"12\\\"\\r\\n                          *ngIf=\\\"isStoreDelivery.isActive\\\">\\r\\n                          <div class=\\\"input-wrap\\\">\\r\\n                            <ion-label>Enter Store Estimated Delivery Time\\r\\n                            </ion-label>\\r\\n                            <ion-input type=\\\"text\\\"\\r\\n                              class=\\\"form-input\\\"\\r\\n                              [(ngModel)]=\\\"isStoreDelivery.estimatedTime\\\"\\r\\n                              (click)=\\\"enterEstimatedTime(0, '', 'isStoreDelivery')\\\"\\r\\n                              readonly></ion-input>\\r\\n                          </div>\\r\\n                        </ion-col>\\r\\n                        <ion-col size=\\\"12\\\"\\r\\n                          *ngIf=\\\"isStoreDelivery.isActive\\\">\\r\\n                          <div style=\\\"display: flex;align-items: center;\\\">\\r\\n                            <!-- <ion-label>Allow Delivery schedule</ion-label>&nbsp;\\r\\n                            <ion-toggle color=\\\"primary\\\"\\r\\n                              (ionChange)=\\\"deliveryScheduleToggle()\\\"\\r\\n                              [checked]=\\\"isDeliverySchedule\\\">\\r\\n                            </ion-toggle> -->\\r\\n                            <p>Allow Delivery Schedule</p>&nbsp;&nbsp;\\r\\n                            <div class=\\\"toggle-btn\\\">\\r\\n                              <label class=\\\"switch\\\">\\r\\n                                <input color=\\\"primary\\\"\\r\\n                                  type=\\\"checkbox\\\"\\r\\n                                  [checked]=\\\"isDeliverySchedule\\\"\\r\\n                                  (click)=\\\"deliveryScheduleToggle()\\\">\\r\\n                                <span class=\\\"slider round\\\"></span>\\r\\n                              </label>\\r\\n                            </div>\\r\\n                          </div>\\r\\n                        </ion-col>\\r\\n                        <ion-col size=\\\"12\\\"\\r\\n                          *ngIf=\\\"isDeliverySchedule && isStoreDelivery.isActive\\\">\\r\\n                          <div style=\\\"display: flex;align-items: center;\\\">\\r\\n                            <!-- <ion-label>Is Delivery schedule mandatory</ion-label>\\r\\n                            &nbsp;\\r\\n                            <ion-toggle color=\\\"primary\\\"\\r\\n                              (ionChange)=\\\"deliveryScheduleMandatoryToggle()\\\"\\r\\n                              [checked]=\\\"isDeliveryScheduleMandatory\\\"></ion-toggle> -->\\r\\n                            <p>Is delivery schedule mandatory</p>&nbsp;&nbsp;\\r\\n                            <div class=\\\"toggle-btn\\\">\\r\\n                              <label class=\\\"switch\\\">\\r\\n                                <input color=\\\"primary\\\"\\r\\n                                  type=\\\"checkbox\\\"\\r\\n                                  [checked]=\\\"isDeliveryScheduleMandatory\\\"\\r\\n                                  (click)=\\\"deliveryScheduleMandatoryToggle()\\\">\\r\\n                                <span class=\\\"slider round\\\"></span>\\r\\n                              </label>\\r\\n                            </div>\\r\\n                          </div>\\r\\n                        </ion-col>\\r\\n                        <ng-container\\r\\n                          *ngIf=\\\"isDeliverySchedule && isStoreDelivery.isActive\\\">\\r\\n                          <ion-col size=\\\"12\\\">\\r\\n                            <div class=\\\"input-wrap\\\">\\r\\n                              <ion-label>Max number of days for Delivery\\r\\n                              </ion-label>\\r\\n                              <ion-input type=\\\"number\\\"\\r\\n                                class=\\\"form-input\\\"\\r\\n                                [(ngModel)]=\\\"maxDaysOfDelivery\\\"></ion-input>\\r\\n                            </div>\\r\\n                          </ion-col>\\r\\n\\r\\n                          <ion-col size=\\\"12\\\">\\r\\n                            <div style=\\\"display: flex;align-items: center;\\\">\\r\\n                              <!-- <ion-label>Allow same day delivery</ion-label>&nbsp;\\r\\n                              <ion-toggle color=\\\"primary\\\"\\r\\n                                (ionChange)=\\\"allowSameDayDeliveryToggle()\\\"\\r\\n                                [checked]=\\\"allowSameDayDelivery\\\"></ion-toggle> -->\\r\\n                              <p>Allow same day delivery</p>&nbsp;&nbsp;\\r\\n                              <div class=\\\"toggle-btn\\\">\\r\\n                                <label class=\\\"switch\\\">\\r\\n                                  <input color=\\\"primary\\\"\\r\\n                                    type=\\\"checkbox\\\"\\r\\n                                    [checked]=\\\"allowSameDayDelivery\\\"\\r\\n                                    (click)=\\\"allowSameDayDeliveryToggle()\\\">\\r\\n                                  <span class=\\\"slider round\\\"></span>\\r\\n                                </label>\\r\\n                              </div>\\r\\n                            </div>\\r\\n                          </ion-col>\\r\\n                          <ion-col size=\\\"12\\\"\\r\\n                            *ngIf=\\\"allowSameDayDelivery\\\">\\r\\n                            <div class=\\\"input-wrap\\\">\\r\\n                              <ion-label>Minimum hours required to prepare order\\r\\n                              </ion-label>\\r\\n                              <ion-input type=\\\"number\\\"\\r\\n                                class=\\\"form-input\\\"\\r\\n                                [(ngModel)]=\\\"minHrs\\\"></ion-input>\\r\\n                            </div>\\r\\n                          </ion-col>\\r\\n                          <ion-col size=\\\"12\\\"\\r\\n                            *ngIf=\\\"allowSameDayDelivery\\\">\\r\\n                            <div class=\\\"input-wrap\\\">\\r\\n                              <ion-label>Last delivery time</ion-label>\\r\\n                              <ion-datetime class=\\\"form-input time-picker\\\"\\r\\n                                displayFormat=\\\"hh:mm A\\\"\\r\\n                                pickerFormat=\\\"hh:mm A\\\"\\r\\n                                [(ngModel)]=\\\"lastDeliveryTime\\\"></ion-datetime>\\r\\n                            </div>\\r\\n                          </ion-col>\\r\\n                          <ion-col size=\\\"12\\\">\\r\\n                            <div class=\\\"input-wrap\\\">\\r\\n                              <ion-label>Days</ion-label>\\r\\n                              <div class=\\\"ds-days-container\\\">\\r\\n                                <div *ngFor=\\\"let x of days;let i = index;\\\"\\r\\n                                  [ngClass]=\\\"{'ds-days-inactive': !x.active, 'ds-days-active': x.active}\\\"\\r\\n                                  (click)=\\\"daySelectToggle(i)\\\">\\r\\n                                  {{x.day}}\\r\\n                                </div>\\r\\n                              </div>\\r\\n                            </div>\\r\\n                          </ion-col>\\r\\n                          <ion-col size=\\\"12\\\">\\r\\n                            <ion-label>Time:</ion-label>\\r\\n                          </ion-col>\\r\\n                          <ion-col size=\\\"5\\\">\\r\\n                            <ion-datetime class=\\\"form-input time-picker\\\"\\r\\n                              displayFormat=\\\"hh:mm A\\\"\\r\\n                              pickerFormat=\\\"hh:mm A\\\"\\r\\n                              [(ngModel)]=\\\"time.start\\\"\\r\\n                              placeholder=\\\"Select Start Time\\\"></ion-datetime>\\r\\n                          </ion-col>\\r\\n                          <ion-col size=\\\"5\\\">\\r\\n                            <ion-datetime class=\\\"form-input time-picker\\\"\\r\\n                              displayFormat=\\\"hh:mm A\\\"\\r\\n                              pickerFormat=\\\"hh:mm A\\\"\\r\\n                              [(ngModel)]=\\\"time.end\\\"\\r\\n                              placeholder=\\\"Select End Time\\\"></ion-datetime>\\r\\n                          </ion-col>\\r\\n                          <ion-col size=\\\"2\\\">\\r\\n                            <ion-button (click)=\\\"addTimeSchedule()\\\"\\r\\n                              fill=\\\"outline\\\"\\r\\n                              shape=\\\"round\\\"\\r\\n                              class=\\\"btn-sml m-t-16\\\"\\r\\n                              [disabled]=\\\"disableAddTimeSchedule()\\\">\\r\\n                              Add\\r\\n                            </ion-button>\\r\\n                          </ion-col>\\r\\n                          <ion-col size=\\\"12\\\">\\r\\n                            <div class=\\\"timer-wraper\\\">\\r\\n                              <ion-chip outline\\r\\n                                color=\\\"dark\\\"\\r\\n                                *ngFor=\\\"let time of timeSchedules; let i = index;\\\">\\r\\n                                <ion-label>{{time.start}} - {{time.end}}\\r\\n                                </ion-label>\\r\\n                                <ion-icon name=\\\"close-circle\\\"\\r\\n                                  (click)=\\\"removeTimeSchedule(i)\\\"></ion-icon>\\r\\n                              </ion-chip>\\r\\n                            </div>\\r\\n                          </ion-col>\\r\\n                          <ion-col size=\\\"12\\\"\\r\\n                            *ngIf=\\\"!currentSelection || currentSelection.id === 'standard'\\\">\\r\\n                            <div class=\\\"manage-slots\\\"\\r\\n                              *ngIf=\\\"scheduledDates.length && timeSchedules.length\\\">\\r\\n                              <div class=\\\"ds-alignment\\\">\\r\\n                                <p class=\\\"ds-headings\\\">Manage slots</p>\\r\\n                                <ion-button (click)=\\\"updateSlot()\\\"\\r\\n                                  fill=\\\"outline\\\"\\r\\n                                  shape=\\\"round\\\"\\r\\n                                  size=\\\"small\\\"\\r\\n                                  [disabled]=\\\"!manageSlots.date\\\">\\r\\n                                  Update\\r\\n                                </ion-button>\\r\\n                              </div>\\r\\n                              <br>\\r\\n                              <div class=\\\"c-c-a\\\">\\r\\n                                <ion-select class=\\\"border\\\"\\r\\n                                  (ionChange)=\\\"selectDate($event)\\\"\\r\\n                                  placeholder=\\\"Select date\\\"\\r\\n                                  style=\\\"border: 2px solid lightgray\\\">\\r\\n                                  <ion-select-option [value]=\\\"date\\\"\\r\\n                                    *ngFor=\\\"let date of scheduledDates\\\">{{date |\\r\\n                                    date}}\\r\\n                                  </ion-select-option>\\r\\n                                </ion-select>\\r\\n                              </div>\\r\\n                              <div *ngIf=\\\"manageSlots.slots.length\\\">\\r\\n                                <ion-grid class=\\\"ion-no-padding data-table\\\">\\r\\n                                  <ion-row\\r\\n                                    style=\\\"display: flex;align-items: center;text-align: center;\\\">\\r\\n                                    <ion-col>Slot</ion-col>\\r\\n                                    <ion-col>Order Limit</ion-col>\\r\\n                                    <ion-col>Orders Received</ion-col>\\r\\n                                    <ion-col>Active</ion-col>\\r\\n                                  </ion-row>\\r\\n                                  <ion-row\\r\\n                                    *ngFor=\\\"let slot of manageSlots.slots; let i=index;\\\"\\r\\n                                    style=\\\"display: flex;align-items: center;text-align: center;\\\">\\r\\n                                    <ion-col>\\r\\n                                      {{slot.start}}-{{slot.end}}\\r\\n                                    </ion-col>\\r\\n                                    <ion-col>\\r\\n                                      <ion-input class=\\\"input-border\\\"\\r\\n                                        type=\\\"number\\\"\\r\\n                                        [(ngModel)]=\\\"slot.orderLimit\\\">\\r\\n                                      </ion-input>\\r\\n                                    </ion-col>\\r\\n                                    <ion-col>\\r\\n                                      <p>{{slot.orderCreated || 0}}</p>\\r\\n                                    </ion-col>\\r\\n                                    <ion-col>\\r\\n                                      <div class=\\\"toggle-btn\\\">\\r\\n                                        <label class=\\\"switch\\\">\\r\\n                                          <input type=\\\"checkbox\\\"\\r\\n                                            (click)=\\\"manageSlotsActive(i)\\\"\\r\\n                                            [checked]=\\\"slot.active\\\">\\r\\n                                          <span class=\\\"slider round\\\"></span>\\r\\n                                        </label>\\r\\n                                      </div>\\r\\n                                    </ion-col>\\r\\n                                  </ion-row>\\r\\n                                </ion-grid>\\r\\n                              </div>\\r\\n                            </div>\\r\\n                          </ion-col>\\r\\n                        </ng-container>\\r\\n                      </div>\\r\\n                      <div *ngSwitchCase=\\\"7\\\">\\r\\n                        <ion-grid>\\r\\n                          <ion-row>\\r\\n                            <ion-col size=\\\"12\\\">\\r\\n                              <ion-text color=\\\"danger\\\">\\r\\n                                <p>Note: You can select either pincode or area\\r\\n                                </p>\\r\\n                              </ion-text>\\r\\n                              <div class=\\\"flex-label\\\">\\r\\n                                <!-- <ion-label>Pincode</ion-label>\\r\\n                                <ion-toggle color=\\\"primary\\\"\\r\\n                                  (ionChange)=\\\"changeDeliveryType($event)\\\"\\r\\n                                  [checked]=\\\"deliveryType == 'areas'\\\"></ion-toggle>\\r\\n                                <ion-label>Area</ion-label> -->\\r\\n                                <p>PinCode</p>&nbsp;&nbsp;\\r\\n                                <div class=\\\"toggle-btn\\\">\\r\\n                                  <label class=\\\"switch\\\">\\r\\n                                    <input color=\\\"primary\\\"\\r\\n                                      type=\\\"checkbox\\\"\\r\\n                                      [checked]=\\\"deliveryType == 'areas'\\\"\\r\\n                                      (click)=\\\"changeDeliveryType($event)\\\">\\r\\n                                    <span class=\\\"slider round\\\"></span>\\r\\n                                  </label>\\r\\n                                </div>&nbsp;&nbsp;\\r\\n                                <p>Area</p>&nbsp;&nbsp;\\r\\n                              </div>\\r\\n                            </ion-col>\\r\\n                          </ion-row>\\r\\n                        </ion-grid>\\r\\n                        <div class=\\\"ds-content\\\"\\r\\n                          *ngIf=\\\"!showLoader && deliveryType == 'pincodes'\\\">\\r\\n                          <ion-grid>\\r\\n                            <ion-row>\\r\\n                              <ion-col size=\\\"12\\\">\\r\\n                                <ion-text color=\\\"danger\\\">\\r\\n                                  <p>Please <b\\r\\n                                      (click)=\\\"presentImportInstructions()\\\"\\r\\n                                      style=\\\"cursor: pointer;\\\">ClICK HERE</b>\\r\\n                                    to read import Instructions</p>\\r\\n                                </ion-text>\\r\\n                              </ion-col>\\r\\n                              <ion-col size=\\\"4\\\">\\r\\n                                <div class=\\\"flex-label\\\">\\r\\n                                  <!-- <ion-label>allow all pincodes</ion-label>\\r\\n                                  <ion-toggle color=\\\"primary\\\"\\r\\n                                    (ionChange)=\\\"allowAllPincodesToggle()\\\"\\r\\n                                    [checked]=\\\"isAllowAllPincodes\\\"></ion-toggle> -->\\r\\n                                  <p>Allow all pincodes</p>&nbsp;&nbsp;\\r\\n                                  <div class=\\\"toggle-btn\\\">\\r\\n                                    <label class=\\\"switch\\\">\\r\\n                                      <input color=\\\"primary\\\"\\r\\n                                        type=\\\"checkbox\\\"\\r\\n                                        [checked]=\\\"isAllowAllPincodes\\\"\\r\\n                                        (click)=\\\"allowAllPincodesToggle()\\\">\\r\\n                                      <span class=\\\"slider round\\\"></span>\\r\\n                                    </label>\\r\\n                                  </div>\\r\\n                                </div>\\r\\n                              </ion-col>\\r\\n                              <ion-col size=\\\"4\\\">\\r\\n                                <div class=\\\"flex-label\\\">\\r\\n                                  <ion-button (click)=\\\"openPincodeModal()\\\"\\r\\n                                    fill=\\\"outline\\\"\\r\\n                                    shape=\\\"round\\\"\\r\\n                                    size=\\\"small\\\">\\r\\n                                    Search Pincode\\r\\n                                  </ion-button>\\r\\n                                </div>\\r\\n                              </ion-col>\\r\\n                              <ion-col size=\\\"4\\\">\\r\\n                                <div class=\\\"flex-label\\\">\\r\\n                                  <div class=\\\"upload-btn-wrapper\\\"\\r\\n                                    (click)=\\\"exportPincodes()\\\">\\r\\n                                    <button class=\\\"upload-btn btn-1 i-start\\\"> <i\\r\\n                                        class=\\\"flaticon-null-16\\\"></i>\\r\\n                                      Export Pincodes CSV</button>\\r\\n                                  </div>\\r\\n                                  <!-- <ion-button (click)=\\\"exportPincodes()\\\" fill=\\\"outline\\\" shape=\\\"round\\\" size=\\\"small\\\">\\r\\n                                    Export Pincodes\\r\\n                                  </ion-button> -->\\r\\n                                  <div class=\\\"upload-btn-wrapper\\\">\\r\\n                                    <button class=\\\"upload-btn btn-1 i-start\\\"> <i\\r\\n                                        class=\\\"flaticon-null-16\\\"></i>Import\\r\\n                                      Pincode\\r\\n                                      CSV</button>\\r\\n                                    <input type=\\\"file\\\"\\r\\n                                      #inputFile\\r\\n                                      name=\\\"myfile\\\"\\r\\n                                      (change)=\\\"importPincodes($event)\\\"\\r\\n                                      accept=\\\".csv, application/vnd.openxmlformats-officedocument.spreadsheetml.sheet, application/vnd.ms-excel\\\" />\\r\\n                                  </div>\\r\\n                                </div>\\r\\n                              </ion-col>\\r\\n                            </ion-row>\\r\\n                          </ion-grid>\\r\\n\\r\\n                          <ion-grid class=\\\"ion-no-padding\\\">\\r\\n                            <ion-row *ngIf=\\\"deliveryPincodes.length > 0\\\">\\r\\n                              <ion-col size=\\\"2\\\">\\r\\n                                <p>Pincodes</p>\\r\\n                              </ion-col>\\r\\n                              <ion-col size=\\\"1\\\">\\r\\n                                <p>Cost</p>\\r\\n                              </ion-col>\\r\\n                              <ion-col size=\\\"2\\\">\\r\\n                                <p>Min Amount</p>\\r\\n                              </ion-col>\\r\\n                              <ion-col size=\\\"2\\\"\\r\\n                                *ngIf=\\\"allowFreeDelivery == true\\\">\\r\\n                                <p>Free Delivery above Amount</p>\\r\\n                              </ion-col>\\r\\n                              <ion-col size=\\\"2\\\">\\r\\n                                <p>Estimated Delivery time\\r\\n                                  <br>\\r\\n                                  (Format: Days:Hours:Mins)\\r\\n                                </p>\\r\\n                              </ion-col>\\r\\n                              <ion-col size=\\\"1\\\">\\r\\n                                <p>Active</p>\\r\\n                              </ion-col>\\r\\n                              <ion-col size=\\\"2\\\">\\r\\n                                Remove\\r\\n                              </ion-col>\\r\\n                            </ion-row>\\r\\n\\r\\n                            <ion-row\\r\\n                              *ngFor=\\\"let x of deliveryPincodes; let i = index;\\\">\\r\\n                              <ion-col size=\\\"2\\\">\\r\\n                                <ion-input type=\\\"tel\\\"\\r\\n                                  class=\\\"form-input\\\"\\r\\n                                  [(ngModel)]=\\\"x.pincode\\\"></ion-input>\\r\\n                              </ion-col>\\r\\n                              <ion-col size=\\\"1\\\">\\r\\n                                <ion-input type=\\\"tel\\\"\\r\\n                                  class=\\\"form-input\\\"\\r\\n                                  [(ngModel)]=\\\"x.cost\\\"></ion-input>\\r\\n                              </ion-col>\\r\\n                              <ion-col size=\\\"2\\\">\\r\\n                                <ion-input type=\\\"number\\\"\\r\\n                                  class=\\\"form-input\\\"\\r\\n                                  [(ngModel)]=\\\"x.minAmnt\\\"></ion-input>\\r\\n                              </ion-col>\\r\\n                              <ion-col size=\\\"2\\\"\\r\\n                                *ngIf=\\\"allowFreeDelivery == true\\\">\\r\\n                                <ion-input type=\\\"number\\\"\\r\\n                                  class=\\\"form-input\\\"\\r\\n                                  [(ngModel)]=\\\"x.freeDeliveryAmnt\\\"></ion-input>\\r\\n                              </ion-col>\\r\\n                              <ion-col size=\\\"2\\\">\\r\\n                                <ion-input type=\\\"text\\\"\\r\\n                                  class=\\\"form-input\\\"\\r\\n                                  [(ngModel)]=\\\"x.estimatedDeliveryTime\\\"\\r\\n                                  (click)=\\\"enterEstimatedTime(i, x, 'pincode')\\\"\\r\\n                                  readonly></ion-input>\\r\\n                              </ion-col>\\r\\n                              <ion-col size=\\\"1\\\">\\r\\n                                <ion-toggle color=\\\"success\\\"\\r\\n                                  (ionChange)=\\\"changePinActiveToggle(i)\\\"\\r\\n                                  [checked]=\\\"x.active\\\">\\r\\n                                </ion-toggle>\\r\\n                              </ion-col>\\r\\n                              <ion-col size=\\\"2\\\">\\r\\n                                <ion-button (click)=\\\"removePincode(i)\\\"\\r\\n                                  color=\\\"danger\\\"\\r\\n                                  class=\\\"btm-sml i-start\\\"\\r\\n                                  shape=\\\"round\\\"\\r\\n                                  fill=\\\"outline\\\">\\r\\n                                  Remove\\r\\n                                </ion-button>\\r\\n                              </ion-col>\\r\\n                            </ion-row>\\r\\n                            <br>\\r\\n                            <ion-row class=\\\"ion-justify-content-center\\\">\\r\\n                              <ion-button (click)=\\\"addPincode()\\\"\\r\\n                                fill=\\\"outline\\\"\\r\\n                                shape=\\\"round\\\"\\r\\n                                size=\\\"small\\\">\\r\\n                                Add Pincode\\r\\n                              </ion-button>\\r\\n                            </ion-row>\\r\\n                          </ion-grid>\\r\\n                        </div>\\r\\n                        <!-- Area -->\\r\\n                        <div class=\\\"ds-content\\\"\\r\\n                          *ngIf=\\\"!showLoader && deliveryType == 'areas'\\\">\\r\\n                          <ion-grid>\\r\\n                            <ion-row class=\\\"ion-justify-content-center\\\">\\r\\n                              <ion-button (click)=\\\"addBlankArea()\\\"\\r\\n                                fill=\\\"outline\\\"\\r\\n                                shape=\\\"round\\\"\\r\\n                                size=\\\"small\\\">\\r\\n                                Add Area Manually\\r\\n                              </ion-button>\\r\\n                              <p class=\\\"or-text\\\">OR</p>\\r\\n                              <ion-button (click)=\\\"openAreaModal()\\\"\\r\\n                                fill=\\\"outline\\\"\\r\\n                                shape=\\\"round\\\"\\r\\n                                size=\\\"small\\\">\\r\\n                                Add Area through map\\r\\n                              </ion-button>\\r\\n                            </ion-row>\\r\\n                          </ion-grid>\\r\\n                          <br>\\r\\n                          <ion-grid class=\\\"ion-no-padding\\\">\\r\\n                            <ion-row *ngIf=\\\"deliveryAreas.length > 0\\\">\\r\\n                              <ion-col size=\\\"2\\\">\\r\\n                                <p>Latitude</p>\\r\\n                              </ion-col>\\r\\n                              <ion-col size=\\\"2\\\">\\r\\n                                <p>Longitude</p>\\r\\n                              </ion-col>\\r\\n                              <ion-col size=\\\"1\\\">\\r\\n                                <p>Radius(In Km)</p>\\r\\n                              </ion-col>\\r\\n                              <ion-col size=\\\"1\\\">\\r\\n                                <p>Cost</p>\\r\\n                              </ion-col>\\r\\n                              <ion-col size=\\\"1\\\">\\r\\n                                <p>Min Amount</p>\\r\\n                              </ion-col>\\r\\n                              <ion-col size=\\\"1\\\"\\r\\n                                *ngIf=\\\"allowFreeDelivery == true\\\">\\r\\n                                <p>Free Delivery above Amount</p>\\r\\n                              </ion-col>\\r\\n                              <ion-col size=\\\"2\\\">\\r\\n                                <p>Estimated Delivery time\\r\\n                                  <br>\\r\\n                                  (Format: Days:Hours:Mins)\\r\\n                                </p>\\r\\n                              </ion-col>\\r\\n                              <ion-col size=\\\"1\\\">\\r\\n                                <p>Active</p>\\r\\n                              </ion-col>\\r\\n                              <ion-col size=\\\"1\\\">\\r\\n                                Remove\\r\\n                              </ion-col>\\r\\n                            </ion-row>\\r\\n\\r\\n                            <ion-row\\r\\n                              *ngFor=\\\"let x of deliveryAreas; let i = index;\\\">\\r\\n                              <ion-col size=\\\"2\\\">\\r\\n                                <ion-input type=\\\"number\\\"\\r\\n                                  class=\\\"form-input\\\"\\r\\n                                  [(ngModel)]=\\\"x.lat\\\"></ion-input>\\r\\n                              </ion-col>\\r\\n                              <ion-col size=\\\"2\\\">\\r\\n                                <ion-input type=\\\"number\\\"\\r\\n                                  class=\\\"form-input\\\"\\r\\n                                  [(ngModel)]=\\\"x.lng\\\"></ion-input>\\r\\n                              </ion-col>\\r\\n                              <ion-col size=\\\"1\\\">\\r\\n                                <ion-input type=\\\"number\\\"\\r\\n                                  class=\\\"form-input\\\"\\r\\n                                  [(ngModel)]=\\\"x.radius\\\"></ion-input>\\r\\n                              </ion-col>\\r\\n                              <ion-col size=\\\"1\\\">\\r\\n                                <ion-input type=\\\"number\\\"\\r\\n                                  class=\\\"form-input\\\"\\r\\n                                  [(ngModel)]=\\\"x.cost\\\"></ion-input>\\r\\n                              </ion-col>\\r\\n                              <ion-col size=\\\"1\\\">\\r\\n                                <ion-input type=\\\"number\\\"\\r\\n                                  class=\\\"form-input\\\"\\r\\n                                  [(ngModel)]=\\\"x.minAmnt\\\"></ion-input>\\r\\n                              </ion-col>\\r\\n                              <ion-col size=\\\"1\\\"\\r\\n                                *ngIf=\\\"allowFreeDelivery == true\\\">\\r\\n                                <ion-input type=\\\"number\\\"\\r\\n                                  class=\\\"form-input\\\"\\r\\n                                  [(ngModel)]=\\\"x.freeDeliveryAmnt\\\"></ion-input>\\r\\n                              </ion-col>\\r\\n                              <ion-col size=\\\"2\\\">\\r\\n                                <ion-input type=\\\"text\\\"\\r\\n                                  class=\\\"form-input\\\"\\r\\n                                  [(ngModel)]=\\\"x.estimatedDeliveryTime\\\"\\r\\n                                  (click)=\\\"enterEstimatedTime(i, x, 'area')\\\"\\r\\n                                  readonly></ion-input>\\r\\n                              </ion-col>\\r\\n                              <ion-col size=\\\"1\\\">\\r\\n                                <ion-toggle color=\\\"success\\\"\\r\\n                                  [(ngModel)]=\\\"x.active\\\"></ion-toggle>\\r\\n                              </ion-col>\\r\\n                              <ion-col size=\\\"1\\\">\\r\\n                                <ion-button (click)=\\\"removeArea(i)\\\"\\r\\n                                  color=\\\"danger\\\"\\r\\n                                  class=\\\"btm-sml i-start remove-area-btn\\\"\\r\\n                                  shape=\\\"round\\\"\\r\\n                                  fill=\\\"outline\\\">\\r\\n                                  Remove\\r\\n                                </ion-button>\\r\\n                              </ion-col>\\r\\n                            </ion-row>\\r\\n                            <br>\\r\\n                          </ion-grid>\\r\\n                        </div>\\r\\n                      </div>\\r\\n                      <div *ngSwitchCase=\\\"8\\\">\\r\\n                        <div class=\\\"input-wrap\\\">\\r\\n                          <ion-label>GST Percentage\\r\\n                          </ion-label>\\r\\n                          <ion-input type=\\\"number\\\"\\r\\n                            class=\\\"form-input\\\" [(ngModel)]=\\\"gstPerc\\\"></ion-input>\\r\\n                        </div>\\r\\n                      </div>\\r\\n                    </ion-row>\\r\\n                  </ion-grid>\\r\\n                </ion-col>\\r\\n              </ion-col>\\r\\n            </ion-row>\\r\\n          </ion-grid>\\r\\n        </div>\\r\\n      </ion-content>\\r\\n    </super-tab>\\r\\n\\r\\n    <!-- 2nd Tab -->\\r\\n    <super-tab>\\r\\n      <ion-content>\\r\\n        <div class=\\\"main-container\\\"\\r\\n          style=\\\"width: 100%;\\\">\\r\\n          <ion-grid>\\r\\n            <ion-row>\\r\\n              <ion-col size=\\\"2\\\">\\r\\n                <div class=\\\"statusList\\\">\\r\\n                  <p (click)=\\\"locationType = 'states'; secondTabActiveElement = 1\\\" [ngClass]=\\\"secondTabActiveElement === 1 ? 'tile-bg-active' : 'tile-bg-inactive'\\\">\\r\\n                    States\\r\\n                  </p>\\r\\n                  <p (click)=\\\"locationType = 'pincodes'; secondTabActiveElement = 2\\\" [ngClass]=\\\"secondTabActiveElement === 2 ? 'tile-bg-active' : 'tile-bg-inactive'\\\">\\r\\n                    Pincodes\\r\\n                  </p>\\r\\n                </div>\\r\\n              </ion-col>\\r\\n              <ion-col size=8\\r\\n                style=\\\"margin-top: 8px; border-left: 1px solid lightgray;\\\"\\r\\n                id=\\\"scroll2\\\">\\r\\n                <ion-col>\\r\\n                  <ion-button (click)=\\\"saveLocations()\\\"\\r\\n                    color=\\\"success\\\">\\r\\n                    <i class=\\\"flaticon-null-20 margin-icon\\\"></i>&nbsp;\\r\\n                    Save\\r\\n                  </ion-button>\\r\\n                </ion-col>\\r\\n                <br>\\r\\n                <ion-col>\\r\\n                  <!-- For States -->\\r\\n                  <ion-grid [hidden]=\\\"locationType == 'pincodes'\\\">\\r\\n                    <ion-row *ngFor=\\\"let state of availableLocations.states; let i = index\\\">\\r\\n                      <ion-col size=\\\"4\\\">\\r\\n                        <div class=\\\"input-wrap\\\">\\r\\n                          <ion-label>State</ion-label>\\r\\n                          <div class=\\\"form-input state-wrapper\\\"\\r\\n                            (click)=\\\"openStateModal(i)\\\">\\r\\n                            <div *ngIf=\\\"state.state\\\">{{state.state}}\\r\\n                            </div>\\r\\n                            <div *ngIf=\\\"!state.state\\\">Select State</div>\\r\\n                            <div>\\r\\n                              <i class=\\\"flaticon-null-13\\\"></i>\\r\\n                            </div>\\r\\n                          </div>\\r\\n                        </div>\\r\\n                      </ion-col>\\r\\n                      <ion-col size=\\\"4\\\">\\r\\n                        <div class=\\\"input-wrap\\\">\\r\\n                          <ion-label>Type</ion-label>\\r\\n                          <ion-select multiple class=\\\"form-input\\\" placeholder=\\\"Select Type\\\" (ionChange)=\\\"setStateTypes($event, i)\\\" [(ngModel)]=\\\"state.types\\\" [value]=\\\"state.types\\\">\\r\\n                                <ion-select-option *ngFor=\\\"let item of newDeliveryType\\\" value=\\\"{{item.id}}\\\">{{item.id}}</ion-select-option>\\r\\n                          </ion-select>\\r\\n                        </div>\\r\\n                      </ion-col>\\r\\n                      <ion-col size=\\\"1\\\" class=\\\"vertical-center\\\">\\r\\n                        <i class=\\\"flaticon-null-19 remove-icon\\\" (click)=\\\"removeLocation('states', i)\\\"></i>\\r\\n                      </ion-col>\\r\\n                    </ion-row>\\r\\n                    <ion-row class=\\\"ion-justify-content-center\\\">\\r\\n                      <ion-button (click)=\\\"addMoreLocation('states')\\\" fill=\\\"outline\\\" shape=\\\"round\\\" size=\\\"small\\\">\\r\\n                        Add More States\\r\\n                      </ion-button>\\r\\n                    </ion-row>\\r\\n                  </ion-grid>\\r\\n                  <!-- For Pincodes -->\\r\\n                  <ion-grid [hidden]=\\\"locationType == 'states'\\\">\\r\\n                    <ion-row *ngFor=\\\"let pincode of availableLocations.pincodes; let i = index\\\">\\r\\n                      <ion-col size=\\\"4\\\">\\r\\n                        <div class=\\\"input-wrap\\\">\\r\\n                          <ion-label>Pincode</ion-label>\\r\\n                          <ion-input type=\\\"text\\\" class=\\\"form-input\\\" [(ngModel)]=\\\"pincode.pincode\\\"></ion-input>\\r\\n                        </div>\\r\\n                      </ion-col>\\r\\n                      <ion-col size=\\\"4\\\">\\r\\n                        <div class=\\\"input-wrap\\\">\\r\\n                          <ion-label>Type</ion-label>\\r\\n                          <ion-select placeholder=\\\"Select Type\\\" multiple [(ngModel)]=\\\"pincode.types\\\">\\r\\n                            <ng-container *ngFor=\\\"let item of newDeliveryType\\\">\\r\\n                              <ion-select-option value=\\\"{{item.id}}\\\">{{item.id}}</ion-select-option>\\r\\n                            </ng-container>\\r\\n                          </ion-select>\\r\\n                        </div>\\r\\n                      </ion-col>\\r\\n                      <ion-col size=\\\"1\\\" class=\\\"vertical-center\\\">\\r\\n                        <i class=\\\"flaticon-null-19 remove-icon\\\" (click)=\\\"removeLocation('pincodes', i)\\\"></i>\\r\\n                      </ion-col>\\r\\n                    </ion-row>\\r\\n                    <ion-row class=\\\"ion-justify-content-center\\\">\\r\\n                      <ion-button (click)=\\\"addMoreLocation('pincodes')\\\" fill=\\\"outline\\\" shape=\\\"round\\\" size=\\\"small\\\">\\r\\n                        Add More Pincodes\\r\\n                      </ion-button>\\r\\n                    </ion-row>\\r\\n                  </ion-grid>\\r\\n                </ion-col>\\r\\n              </ion-col>\\r\\n            </ion-row>\\r\\n          </ion-grid>\\r\\n        </div>\\r\\n      </ion-content>\\r\\n    </super-tab>\\r\\n  </super-tabs-container>\\r\\n\\r\\n</super-tabs>\"","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { Routes, RouterModule } from '@angular/router';\r\n\r\nimport { IonicModule } from '@ionic/angular';\r\n\r\nimport { DeliverySettingsPage } from './delivery-settings.page';\r\nimport { SuperTabsModule } from '@ionic-super-tabs/angular';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    component: DeliverySettingsPage\r\n  }\r\n];\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    FormsModule,\r\n    IonicModule,\r\n    RouterModule.forChild(routes),\r\n    SuperTabsModule\r\n  ],\r\n  declarations: [DeliverySettingsPage]\r\n})\r\nexport class DeliverySettingsPageModule {}\r\n","module.exports = \".input-border {\\n  border: 1px solid #ccc;\\n  border-radius: 5px;\\n}\\n\\n.ds-content {\\n  font-size: 14px;\\n  text-transform: capitalize;\\n}\\n\\n.ds-all-pincodes ion-input {\\n  --padding-start: 0px;\\n}\\n\\nion-input {\\n  font-size: 13px;\\n}\\n\\n.ds-content p {\\n  margin-bottom: 5px;\\n}\\n\\n.ds-alignment {\\n  display: -webkit-box;\\n  display: flex;\\n  -webkit-box-pack: justify;\\n          justify-content: space-between;\\n  -webkit-box-align: center;\\n          align-items: center;\\n}\\n\\n.ds-headings {\\n  width: 45%;\\n  margin-right: 10%;\\n}\\n\\n.ds-days-container {\\n  display: -webkit-box;\\n  display: flex;\\n  flex-flow: wrap;\\n}\\n\\n.ds-days-inactive {\\n  border: 1px solid #ccc;\\n  text-align: center;\\n  padding: 10px 15px 10px 15px;\\n  border-radius: 5px;\\n  margin: 4px;\\n}\\n\\n.ds-days-active {\\n  border: 1px solid var(--ion-color-chat-border);\\n  text-align: center;\\n  padding: 10px 15px 10px 15px;\\n  border-radius: 5px;\\n  margin: 4px;\\n  background: var(--ion-color-chat-background);\\n}\\n\\n.line {\\n  border: 0;\\n  clear: both;\\n  display: block;\\n  width: 100%;\\n  background-color: #ccc;\\n  height: 1px;\\n  opacity: 0.4;\\n}\\n\\n.flaticon-null-17::before {\\n  font-size: 18px;\\n  opacity: 0.7;\\n  margin-right: -10px;\\n}\\n\\n.spinner {\\n  margin-top: 50%;\\n  text-align: center;\\n}\\n\\n.time-picker {\\n  padding-right: 15px;\\n}\\n\\nion-datetime {\\n  font-size: small;\\n}\\n\\n.delivery-wt-txt {\\n  display: -webkit-box;\\n  display: flex;\\n}\\n\\n.delivery-wt-txt ion-input {\\n  margin-top: -10px;\\n}\\n\\n.remove-area-btn {\\n  --padding-start: 10px;\\n  --padding-end: 10px;\\n}\\n\\n.or-text {\\n  display: -webkit-box;\\n  display: flex;\\n  -webkit-box-align: center;\\n          align-items: center;\\n  margin: 0px 10px;\\n  margin-bottom: 0px !important;\\n}\\n\\n.img-container {\\n  width: 80%;\\n  height: 60%;\\n  display: -webkit-box;\\n  display: flex;\\n  -webkit-box-pack: center;\\n          justify-content: center;\\n  margin: auto;\\n}\\n\\n.img-container img {\\n  max-width: 100%;\\n  max-height: 100%;\\n}\\n\\n#scroll1 {\\n  overflow: hidden;\\n  height: 82vh;\\n}\\n\\n#scroll1:hover {\\n  overflow-y: auto;\\n}\\n\\n#scroll2 {\\n  overflow: hidden;\\n  height: 82vh;\\n}\\n\\n#scroll2:hover {\\n  overflow-y: auto;\\n}\\n\\n@media screen and (min-height: 1200px) {\\n  #scroll1 {\\n    height: 92vh;\\n  }\\n\\n  #scroll2 {\\n    height: 92vh;\\n  }\\n}\\n\\n.statusList {\\n  text-align: center;\\n}\\n\\n.statusList p {\\n  font-size: medium;\\n  border: 1px solid lightgray;\\n  padding: 10px;\\n  margin: 8px;\\n  cursor: pointer;\\n  text-transform: capitalize;\\n}\\n\\n.state-wrapper {\\n  border: 1px solid #ccc;\\n  border-radius: 5px;\\n  padding: 8px;\\n  display: -webkit-box;\\n  display: flex;\\n  -webkit-box-pack: justify;\\n          justify-content: space-between;\\n  -webkit-box-align: center;\\n          align-items: center;\\n}\\n\\n.tile-bg-active {\\n  background-color: var(--ion-color-categories-background);\\n}\\n/*# sourceMappingURL=data:application/json;base64, */\"","import { Component, ElementRef, OnInit, ViewChild } from '@angular/core';\r\nimport { Events, LoadingController, AlertController, IonContent, ModalController } from '@ionic/angular';\r\nimport * as moment from 'moment';\r\nimport { ConfigService } from 'src/app/services/config/config.service';\r\nimport { DeliveryPartnerSettingsPage } from './delivery-partner-settings/delivery-partner-settings.page';\r\nimport { PincodesModalPage } from 'src/app/pincodes-modal/pincodes-modal.page';\r\nimport { ExportToCsv } from 'export-to-csv';\r\nimport { Papa } from 'ngx-papaparse';\r\nimport { AreaModalPage } from './area-modal/area-modal.page';\r\nimport { SharedService } from 'src/app/services/shared/shared.service';\r\n// import { triggerId } from 'async_hooks';\r\nimport { DeliverySettingsService } from 'src/app/services/delivery-settings/delivery-settings.service';\r\nimport { StatesModalPage } from 'src/app/states-modal/states-modal.page';\r\n@Component({\r\n  selector: 'app-delivery-settings',\r\n  templateUrl: './delivery-settings.page.html',\r\n  styleUrls: ['./delivery-settings.page.scss'],\r\n})\r\nexport class DeliverySettingsPage implements OnInit {\r\n\r\n  defaultDeliveryAmt: string = '';\r\n  freeDeliveryAmt: string = '';\r\n  isStorePickup: boolean = false;\r\n  storePickupCharges: string = '';\r\n  isKmBasedDelivery: boolean = false;\r\n  chargesPerKm: string = '';\r\n  maxDeliveryOfKm: string = '';\r\n  isDeliverySchedule: boolean = false;\r\n  deliveryDays: any = [];\r\n  timeSchedules: any = [];\r\n  maxDaysOfDelivery: number;\r\n  allowSameDayDelivery: boolean = false;\r\n  lastDeliveryTime: any = new Date().toISOString();\r\n  instantDelivery = {\r\n    isActive: false,\r\n    time: null\r\n  };\r\n  isStoreDelivery = { isActive: false, estimatedTime: '' }\r\n  days: any = [\r\n    { day: 'Sunday', active: false }, { day: 'Monday', active: false }, { day: 'Tuesday', active: false }, { day: 'Wednesday', active: false },\r\n    { day: 'Thursday', active: false }, { day: 'Friday', active: false }, { day: 'Saturday', active: false }\r\n  ]\r\n  time: any = {\r\n    start: null,\r\n    end: null,\r\n  };\r\n\r\n  deliveryType = 'pincodes';\r\n  isAllowAllPincodes: boolean = true;\r\n  deliveryPincodes: any = [\r\n    {\r\n      pincode: '',\r\n      cost: '0',\r\n      active: true,\r\n      minAmnt: null,\r\n      freeDeliveryAmnt: null,\r\n      estimatedDeliveryTime: ''\r\n    }\r\n  ];\r\n  deliveryAreas = [\r\n    {\r\n      lat: 0,\r\n      lng: 0,\r\n      cost: 0,\r\n      radius: 0,\r\n      active: true,\r\n      minAmnt: null,\r\n      freeDeliveryAmnt: null,\r\n      estimatedDeliveryTime: ''\r\n    }\r\n  ];\r\n  loading: any;\r\n  showLoader: boolean = true;\r\n  isDeliveryBasedKmAllowed: boolean;\r\n  currencyCode: string;\r\n  isDeliveryScheduleMandatory = false;\r\n  minHrs = null;\r\n  DELIVERY_SETTINGS_LABELS = {};\r\n  SHARED_LABELS = {};\r\n  scheduledDates = [];\r\n  manageSlots = {\r\n    date: null,\r\n    slots: []\r\n  }\r\n  selectDatePh: any;\r\n  isDeliveryBasedOnWeight = false;\r\n  deliveryByWeight = {\r\n    active: false,\r\n    cost: 0,\r\n    baseWeight: 0,\r\n    baseCost: 0\r\n  }\r\n\r\n  @ViewChild(IonContent, { static: false }) content: IonContent;\r\n  @ViewChild('inputFile', { static: false }) myInputVariable: ElementRef;\r\n  sidemenu = []\r\n  selectedId = 'field0'\r\n  selectedIdType = '0'\r\n  kmSlabs = {\r\n    active: false,\r\n    slabs: []\r\n  }\r\n  weightSlabs = {\r\n    active: false,\r\n    slabs: []\r\n  }\r\n  allowFreeDelivery = true\r\n  newDeliveryType;\r\n\r\n  currentSelection: any;\r\n  triggeredSelection: any;\r\n\r\n  locationType = 'states';\r\n  availableLocations = {\r\n    states: [{state: '', stateCode: '', types: []}],\r\n    pincodes: [{pincode: '', types: []}]\r\n  }\r\n  stateTypes: any;\r\n  secondTabActiveElement = 1;\r\n  gstPerc;\r\n\r\n  constructor(private events: Events,\r\n    private loadingController: LoadingController,\r\n    private alertController: AlertController,\r\n    private configService: ConfigService,\r\n    private modalController: ModalController,\r\n    private papa: Papa,\r\n    private sharedService: SharedService,\r\n    private deliverySettingsService: DeliverySettingsService) {\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.newDeliveryType = [];\r\n    this.isDeliveryBasedKmAllowed = this.configService.environment.isDeliveryBasedKm;\r\n    this.isDeliveryBasedOnWeight = this.configService.environment.isDeliveryBasedOnWeight;\r\n    this.initializeSubscriptions();\r\n    this.events.publish('delivery-settings:getDeliverySettingsData');\r\n    this.currencyCode = this.configService.environment.currencyCode;\r\n    this.sidemenu.push('Default Delivery', 'Free Delivery', 'Allow Store Pickup', 'Delivery Based on Km', 'Delivery Based On Weight',\r\n      'Instant Delivery', 'Store Delivery / Schedule', 'Pincode / Area', 'GST Percentage')\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.removeSubscriptions();\r\n  }\r\n\r\n  async ionViewWillEnter() {\r\n    this.manageSlots = {\r\n      date: null,\r\n      slots: []\r\n    };\r\n  }\r\n\r\n  initializeSubscriptions() {\r\n    this.events.subscribe('delivery-settings:saveDeliverySettingsSuccess', () => {\r\n      this.loading.dismiss();\r\n      this.presentAlert('Delivery data saved successfully!');\r\n    });\r\n    this.events.subscribe('delivery-settings:publishDeliverySettingsData', async (data) => {\r\n      this.showLoader = false;\r\n      this.setDeliverySettings(data);\r\n      this.newDeliveryType = await this.deliverySettingsService.getDeliveryType()\r\n      this.newDeliveryType.unshift({ id: 'standard', settings: data });\r\n      this.currentSelection = { id: 'standard', settings: data };\r\n    });\r\n    this.events.subscribe('delivery-settings:slotsWithDate', (slotsDoc) => {\r\n      if (this.loading) {\r\n        this.loading.dismiss();\r\n      }\r\n      if (slotsDoc && slotsDoc !== undefined) {\r\n        let finalSlots = [];\r\n        for (let index = 0; index < slotsDoc.slots.length; index++) {\r\n          console.log('removing slot index', index);\r\n          if (this.findTimeSlot(slotsDoc.slots, index, this.timeSchedules)) {\r\n            finalSlots.push(slotsDoc.slots[index]);\r\n          }\r\n        }\r\n        for (let index = 0; index < this.timeSchedules.length; index++) {\r\n          if (!this.findTimeSlot(this.timeSchedules, index, slotsDoc.slots)) {\r\n            finalSlots.push({\r\n              start: this.timeSchedules[index].start,\r\n              end: this.timeSchedules[index].end,\r\n              active: false,\r\n              orderLimit: 0,\r\n              orderCreated: 0\r\n            });\r\n          }\r\n        }\r\n        this.manageSlots.slots = finalSlots;\r\n      } else {\r\n        this.timeSchedules.forEach(schedule => {\r\n          this.manageSlots.slots.push({\r\n            ...schedule,\r\n            active: false,\r\n            orderLimit: 0,\r\n            orderCreated: 0\r\n          });\r\n        });\r\n      }\r\n      setTimeout(() => {\r\n        this.content.scrollToBottom(500)\r\n      }, 200);\r\n    });\r\n    this.events.subscribe('delivery-settings:slotUpdated', () => {\r\n      if (this.loading) {\r\n        this.loading.dismiss();\r\n      }\r\n      this.presentAlert('Slot data saved successfully');\r\n    });\r\n    this.getLocations();\r\n  }\r\n\r\n  isEmptyObj(object) {\r\n    for (const key in object) {\r\n      if (object.hasOwnProperty(key)) {\r\n        return false;\r\n      }\r\n    }\r\n    return true;\r\n  }\r\n\r\n  async updateSlot() {\r\n    await this.presentLoading();\r\n    this.events.publish('delivery-settings:updateSlot', this.manageSlots);\r\n  }\r\n\r\n  findTimeSlot(src, index, target) {\r\n    const slot = { start: src[index].start, end: src[index].end };\r\n    let slotPresent = target.some(sch => sch.start === slot.start && sch.end === slot.end);\r\n    return slotPresent;\r\n  }\r\n\r\n  async selectDate(e) {\r\n    console.log(e.target.value);\r\n    this.manageSlots.date = e.target.value;\r\n    this.manageSlots.slots = [];\r\n    await this.presentLoading();\r\n    this.events.publish('delivery-settings:getSlotsWithDate', this.manageSlots.date.toDateString());\r\n  }\r\n\r\n  manageSlotsActive(i: number) {\r\n    this.manageSlots.slots[i].active = !this.manageSlots.slots[i].active;\r\n  }\r\n\r\n  getDeliveryDates() {\r\n    this.scheduledDates = [];\r\n    for (let index = 0; index < this.maxDaysOfDelivery; index++) {\r\n      let dayToCheck = moment().add(index + 1, 'days');\r\n      if (this.deliveryDays.includes(dayToCheck.format('dddd'))) {\r\n        this.scheduledDates.push(dayToCheck.toDate());\r\n      }\r\n    }\r\n    if (this.allowSameDayDelivery) {\r\n      this.appendSameDateToDeliveryDates(this.lastDeliveryTime);\r\n    }\r\n    this.minHrsReqCheck();\r\n  }\r\n\r\n  appendSameDateToDeliveryDates(lastTime) {\r\n    let now: any = moment().format('HH:mm');\r\n    let lastDeliveryTime: any = moment(lastTime, ['hh:mm A']).format('HH:mm');\r\n    if (now < lastDeliveryTime) {\r\n      this.scheduledDates.unshift(new Date());\r\n    }\r\n  }\r\n\r\n  minHrsReqCheck() {\r\n    const now: any = parseInt(moment().format('HH'));\r\n    const t1 = now + this.minHrs;\r\n    if (t1 > 24) {\r\n      let disabledDays = Math.floor(t1 / 24);\r\n      let actualDays = [];\r\n      disabledDays = this.allowSameDayDelivery ? disabledDays : disabledDays - 1;\r\n      disabledDays = disabledDays < 0 ? 0 : disabledDays;\r\n      for (let index = disabledDays; index < this.scheduledDates.length; index++) {\r\n        actualDays.push(this.scheduledDates[index]);\r\n      }\r\n      this.scheduledDates = actualDays;\r\n    }\r\n  }\r\n\r\n  storePickupToggle() {\r\n    this.isStorePickup = !this.isStorePickup;\r\n  }\r\n  deliveryBasedToggle() {\r\n    this.isKmBasedDelivery = !this.isKmBasedDelivery;\r\n  }\r\n  deliveryScheduleToggle() {\r\n    this.isDeliverySchedule = !this.isDeliverySchedule;\r\n  }\r\n  deliveryScheduleMandatoryToggle() {\r\n    this.isDeliveryScheduleMandatory = !this.isDeliveryScheduleMandatory;\r\n  }\r\n\r\n  daySelectToggle(i) {\r\n    this.days[i].active = !this.days[i].active;\r\n  }\r\n\r\n  allowAllPincodesToggle() {\r\n    this.isAllowAllPincodes = !this.isAllowAllPincodes;\r\n  }\r\n\r\n  addTimeSchedule() {\r\n    this.timeSchedules.push({\r\n      start: moment(this.time.start).format('hh:mm A'),\r\n      end: moment(this.time.end).format('hh:mm A')\r\n    });\r\n    this.time.start = null;\r\n    this.time.end = null;\r\n  }\r\n\r\n  disableAddTimeSchedule() {\r\n    if (!this.time.start || !this.time.end) {\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  getTime(time) {\r\n    return moment(time).format('hh:mm A');\r\n  }\r\n\r\n  removeTimeSchedule(index) {\r\n    this.timeSchedules.splice(index, 1);\r\n  }\r\n\r\n  changePinActiveToggle(index) {\r\n    this.deliveryPincodes[index].active = !this.deliveryPincodes[index].active;\r\n  }\r\n\r\n  removePincode(index) {\r\n    this.deliveryPincodes.splice(index, 1);\r\n  }\r\n  removeArea(index) {\r\n    this.deliveryAreas.splice(index, 1);\r\n  }\r\n\r\n  changeDeliveryType(ev) {\r\n    console.log('ev:', ev);\r\n    this.deliveryType = ev.target.checked ? 'areas' : 'pincodes';\r\n  }\r\n\r\n  addPincode() {\r\n    const blankPincode = {\r\n      pincode: '',\r\n      cost: '0',\r\n      active: true,\r\n      minAmnt: null,\r\n      freeDeliveryAmnt: null,\r\n      estimatedDeliveryTime: ''\r\n    };\r\n    this.deliveryPincodes.push(blankPincode);\r\n  }\r\n  addBlankArea() {\r\n    const blankPincode = {\r\n      lat: 0,\r\n      lng: 0,\r\n      cost: 0,\r\n      radius: 0,\r\n      active: true,\r\n      minAmnt: null,\r\n      freeDeliveryAmnt: null,\r\n      estimatedDeliveryTime: ''\r\n    };\r\n    this.deliveryAreas.push(blankPincode);\r\n  }\r\n\r\n  async saveAllDeliverySetting() {\r\n    // this.currentSelection = this.triggeredSelection;\r\n    if (this.instantDelivery.isActive && this.instantDelivery.time == null) {\r\n      this.presentAlert('Please enter instant delivery time');\r\n      return;\r\n    }\r\n    this.deliveryDays = [];\r\n    for (let index = 0; index < this.days.length; index++) {\r\n      if (this.days[index].active) {\r\n        this.deliveryDays.push(this.days[index].day);\r\n      }\r\n    }\r\n    let emptyPincode = false;\r\n    for (let index = 0; index < this.deliveryPincodes.length; index++) {\r\n      this.deliveryPincodes[index].pincode = this.deliveryPincodes[index].pincode.trim();\r\n      if (this.deliveryPincodes[index].pincode === '' || this.deliveryPincodes[index].cost === '') {\r\n        emptyPincode = true;\r\n        break;\r\n      }\r\n    }\r\n    console.log('deliveryareas:', this.deliveryAreas);\r\n    let emptyLatLng = false;\r\n    for (let index = 0; index < this.deliveryAreas.length; index++) {\r\n      if (this.deliveryAreas[index].lat == 0 || this.deliveryAreas[index].lng == 0 || this.deliveryAreas[index].radius == 0) {\r\n        emptyLatLng = true;\r\n        break;\r\n      }\r\n    }\r\n    //console.log('emptyLatLng && this.allowArea', emptyLatLng , this.allowArea)\r\n    //this.deliveryType = this.allowArea ? 'areas' : 'pincodes';\r\n    if (emptyPincode && this.deliveryType == 'pincodes') {\r\n      this.presentAlert('Pincodes and Cost cannot be empty');\r\n      return;\r\n    } else if (emptyLatLng && this.deliveryType == 'areas') {\r\n      this.presentAlert('Latitude, Longitude and Radius cannot be empty or 0');\r\n      return;\r\n    }\r\n    else {\r\n      const details = {\r\n        defaultDeliveryAmt: this.defaultDeliveryAmt,\r\n        freeDeliveryAmt: this.freeDeliveryAmt,\r\n        isStorePickup: this.isStorePickup,\r\n        storePickupCharges: this.storePickupCharges,\r\n        isKmBasedDelivery: this.isKmBasedDelivery,\r\n        deliveryByWeight: this.deliveryByWeight,\r\n        chargesPerKm: this.chargesPerKm,\r\n        maxDeliveryOfKm: this.maxDeliveryOfKm ? this.maxDeliveryOfKm : '',\r\n        isDeliverySchedule: this.isDeliverySchedule,\r\n        isDeliveryScheduleMandatory: this.isDeliveryScheduleMandatory,\r\n        deliveryDays: this.deliveryDays,\r\n        timeSchedules: this.timeSchedules,\r\n        deliveryType: this.deliveryType,\r\n        isAllowAllPincodes: this.isAllowAllPincodes,\r\n        deliveryPincodes: this.deliveryPincodes,\r\n        deliveryAreas: this.deliveryAreas,\r\n        maxDaysOfDelivery: this.maxDaysOfDelivery ? this.maxDaysOfDelivery : 14,\r\n        minHrs: this.minHrs ? this.minHrs : null,\r\n        allowSameDayDelivery: this.allowSameDayDelivery,\r\n        lastDeliveryTime: moment(this.lastDeliveryTime).format('hh:mm A'),\r\n        instantDelivery: this.instantDelivery,\r\n        isStoreDelivery: this.isStoreDelivery,\r\n        kmSlabs: this.kmSlabs,\r\n        weightSlabs: this.weightSlabs,\r\n        allowFreeDelivery: this.allowFreeDelivery,\r\n        gstPerc: this.gstPerc\r\n      };\r\n      console.log('details:', details);\r\n      await this.presentLoading();\r\n      const currentIndex = this.newDeliveryType.findIndex(n => n.id === this.currentSelection.id);\r\n      this.newDeliveryType[currentIndex].settings = details;\r\n      this.events.publish('delivery-settings:saveDeliverySettings', details, this.currentSelection.id);\r\n    }\r\n\r\n  }\r\n\r\n  allowSameDayDeliveryToggle() {\r\n    this.allowSameDayDelivery = !this.allowSameDayDelivery;\r\n  }\r\n\r\n  async presentAlert(msg: string) {\r\n    const alert = await this.alertController.create({\r\n      message: msg,\r\n      buttons: ['OK']\r\n    });\r\n\r\n    await alert.present();\r\n  }\r\n\r\n  async presentLoading() {\r\n    this.loading = await this.loadingController.create({\r\n      message: 'Please wait...',\r\n      duration: 10000,\r\n    });\r\n    await this.loading.present();\r\n  }\r\n\r\n  deliveryWeightBasedToggle() {\r\n    this.deliveryByWeight.active = !this.deliveryByWeight.active;\r\n  }\r\n\r\n  async enterEstimatedTime(i, deliveryPinObj, pinOrArea) {\r\n    let arr = [];\r\n    if (pinOrArea === 'isStoreDelivery') {\r\n      if (this.isStoreDelivery.estimatedTime.length > 0) {\r\n        arr = this.isStoreDelivery.estimatedTime.split(':');\r\n      }\r\n    } else {\r\n      if (deliveryPinObj.estimatedDeliveryTime.length > 0) {\r\n        arr = deliveryPinObj.estimatedDeliveryTime.split(':');\r\n      }\r\n    }\r\n    let days = arr.length > 0 ? arr[0] : '00';\r\n    let hours = arr.length > 0 ? arr[1] : '00';\r\n    let mins = arr.length > 0 ? arr[2] : '00';\r\n    const alert = await this.alertController.create({\r\n      subHeader: 'Estimated Delivery Time',\r\n      inputs: [{\r\n        label: 'Days',\r\n        name: 'days',\r\n        type: 'number',\r\n        placeholder: 'Days',\r\n        value: parseInt(days) == 0 ? null : days\r\n      },\r\n      {\r\n        name: 'hours',\r\n        type: 'number',\r\n        placeholder: 'Hours',\r\n        value: parseInt(hours) == 0 ? null : hours\r\n      },\r\n      {\r\n        name: 'mins',\r\n        type: 'number',\r\n        placeholder: 'Mins',\r\n        value: parseInt(mins) == 0 ? null : mins\r\n      }\r\n      ],\r\n      buttons: [{\r\n        text: 'cancel',\r\n        role: 'cancel',\r\n        cssClass: 'secondary',\r\n        handler: () => {\r\n          console.log('Confirm Cancel');\r\n        }\r\n      }, {\r\n        text: 'Add',\r\n        handler: (plan) => {\r\n          if (pinOrArea == 'pincode') {\r\n            this.deliveryPincodes[i].estimatedDeliveryTime = `${plan.days ? plan.days : '00'}:${plan.hours ? plan.hours : '00'}:${plan.mins ? plan.mins : '00'}`;\r\n          } else if (pinOrArea == 'area') {\r\n            this.deliveryAreas[i].estimatedDeliveryTime = `${plan.days ? plan.days : '00'}:${plan.hours ? plan.hours : '00'}:${plan.mins ? plan.mins : '00'}`;\r\n          } else if (pinOrArea == 'isStoreDelivery') {\r\n            this.isStoreDelivery.estimatedTime = `${plan.days ? plan.days : '00'}:${plan.hours ? plan.hours : '00'}:${plan.mins ? plan.mins : '00'}`;\r\n          }\r\n        }\r\n      }]\r\n    });\r\n    await alert.present();\r\n  }\r\n\r\n  removeSubscriptions() {\r\n    this.events.unsubscribe('delivery-settings:saveDeliverySettingsSuccess');\r\n    this.events.unsubscribe('delivery-settings:publishDeliverySettingsData');\r\n    this.events.unsubscribe('delivery-settings:slotsWithDate');\r\n    this.events.unsubscribe('delivery-settings:slotUpdated');\r\n  }\r\n\r\n  async openDeliveryPartner(deliveryPartnerChoice) {\r\n    const modal = await this.modalController.create({\r\n      component: DeliveryPartnerSettingsPage,\r\n      backdropDismiss: false,\r\n      componentProps: {\r\n        deliveryPartnerChoice: deliveryPartnerChoice,\r\n      }\r\n    });\r\n    modal.onDidDismiss()\r\n      .then((res) => {\r\n      });\r\n    await modal.present();\r\n  }\r\n\r\n  async openAreaModal() {\r\n    const modal = await this.modalController.create({\r\n      component: AreaModalPage,\r\n      cssClass: 'custom-modal big-modal',\r\n      backdropDismiss: false,\r\n    });\r\n    modal.onDidDismiss()\r\n      .then((res) => {\r\n        if (res.data && res.data.lat != 0 && res.data.lng != 0) {\r\n          this.deliveryAreas.push({\r\n            lat: res.data.lat,\r\n            lng: res.data.lng,\r\n            active: true,\r\n            cost: 0,\r\n            radius: 0,\r\n            minAmnt: null,\r\n            freeDeliveryAmnt: null,\r\n            estimatedDeliveryTime: ''\r\n          })\r\n        }\r\n      });\r\n    await modal.present();\r\n  }\r\n\r\n\r\n  async openPincodeModal() {\r\n    const modal = await this.modalController.create({\r\n      component: PincodesModalPage,\r\n      backdropDismiss: false,\r\n      componentProps: {\r\n        alreadyAddedPincodes: this.deliveryPincodes\r\n      }\r\n    });\r\n    modal.onDidDismiss()\r\n      .then((res) => {\r\n        this.deliveryPincodes = res.data;\r\n      });\r\n    await modal.present();\r\n  }\r\n\r\n  exportPincodes() {\r\n    var data = [];\r\n    this.deliveryPincodes.forEach((element) => {\r\n      let obj = {\r\n        pincode: element.pincode,\r\n        cost: element.cost ? element.cost : '0',\r\n        minAmnt: element.minAmnt ? element.minAmnt : '',\r\n        freeDeliveryAmnt: element.freeDeliveryAmnt ? element.freeDeliveryAmnt : '',\r\n        estimatedDeliveryTime: element.estimatedDeliveryTime,\r\n        active: element.active ? 'YES' : 'NO',\r\n      };\r\n      data.push(obj);\r\n    });\r\n    const options = {\r\n      fieldSeparator: ',',\r\n      quoteStrings: '\"',\r\n      filename: 'Pincodes',\r\n      decimalSeparator: '.',\r\n      showLabels: true,\r\n      showTitle: false,\r\n      useTextFile: false,\r\n      useBom: true,\r\n      useKeysAsHeaders: true,\r\n      //headers: ['Pincodes', 'Cost', 'Min Amount', 'Free Delivery Above amount']\r\n    };\r\n    const csvExporter = new ExportToCsv(options);\r\n    csvExporter.generateCsv(data);\r\n  }\r\n\r\n  checkValidCsv(data) {\r\n    let isValid = true;\r\n    if (data[0].indexOf('pincode') < 0) {\r\n      isValid = false;\r\n    }\r\n    return isValid;\r\n  }\r\n\r\n  async presentImportInstructions() {\r\n    const alert = await this.alertController.create({\r\n      header: 'Import Instructions',\r\n      message: '1. Please provide Estimated Delivery Time in <b>Days:Hours:Mins</b> format. </br>' +\r\n        '2. Do not leave any pincode empty. </br>' +\r\n        '3. All the pincode data will be replaced by the imported file.',\r\n      buttons: ['ok']\r\n    });\r\n    await alert.present();\r\n  }\r\n  async importPincodes(csv: any) {\r\n    console.log('csv:', csv);\r\n    if (csv) {\r\n      await this.presentLoading();\r\n      let csvFile = csv.target.files[0];\r\n      let options = {\r\n        complete: (results, file) => {\r\n          if (this.checkValidCsv(results.data)) {\r\n            this.deliveryPincodes = [];\r\n            for (let i = 1; i < results.data.length; i++) {\r\n              let item = {\r\n                pincode: results.data[i][0],\r\n                cost: results.data[i][1] ? results.data[i][1].toString() : '',\r\n                minAmnt: results.data[i][2] ? results.data[i][2] : null,\r\n                freeDeliveryAmnt: results.data[i][3] ? results.data[i][3] : null,\r\n                estimatedDeliveryTime: results.data[i][4] ? results.data[i][4] : '',\r\n                active: results.data[i][5] ? (results.data[i][5].toLowerCase() == 'yes' ? true : false) : false\r\n              };\r\n              this.deliveryPincodes.push(item);\r\n            }\r\n            this.loading.dismiss();\r\n            this.presentAlert('File imported Successfully');\r\n          }\r\n          else {\r\n            this.loading.dismiss();\r\n            this.presentAlert('Inavlid CSV !, Please check that CSV upload is correct');\r\n          }\r\n        }\r\n        // Add your options here\r\n      };\r\n      this.papa.parse(csvFile, options);\r\n    }\r\n    this.myInputVariable.nativeElement.value = '';\r\n  }\r\n\r\n  changeComponent(index) {\r\n    let prevMsgDiv = document.getElementById(this.selectedId);\r\n    prevMsgDiv.style.background = 'white';\r\n    let msgDiv = document.getElementById(index.toString());\r\n    msgDiv.style.background = 'var(--ion-color-categories-background)';\r\n    this.selectedId = index.toString();\r\n  }\r\n\r\n  activeKmSlab() {\r\n    this.kmSlabs.active = !this.kmSlabs.active\r\n  }\r\n\r\n  async enterSlabData() {\r\n    const alert = await this.alertController.create({\r\n      subHeader: \"Enter Slab Details\",\r\n      inputs: [\r\n        {\r\n          name: 'distance',\r\n          type: 'number',\r\n          placeholder: \"Add distance for slab in Kms\"\r\n        },\r\n        {\r\n          name: 'cost',\r\n          type: 'number',\r\n          placeholder: \"Add cost for slab\"\r\n        },\r\n        {\r\n          name: 'freeDeliveryAmount',\r\n          type: 'number',\r\n          placeholder: \"Add free delivery amount\"\r\n        }\r\n      ],\r\n      buttons: [\r\n        {\r\n          text: \"cancel\",\r\n          role: 'cancel',\r\n          cssClass: 'secondary',\r\n          handler: () => {\r\n            console.log('Confirm Cancel');\r\n          }\r\n        }, {\r\n          text: \"done\",\r\n          handler: async (data) => {\r\n            if (!data.distance || !data.cost || !data.freeDeliveryAmount) {\r\n              this.presentAlert(\"Please enter all details!\");\r\n            }\r\n            else {\r\n              if (this.kmSlabs.slabs.length == 0) {\r\n                this.kmSlabs.slabs.push({\r\n                  range: [0, parseInt(data.distance)],\r\n                  cost: parseInt(data.cost),\r\n                  freeDeliveryAmount: parseInt(data.freeDeliveryAmount)\r\n                })\r\n              }\r\n              else {\r\n                let lastIndex = this.kmSlabs.slabs.length\r\n                this.kmSlabs.slabs.push({\r\n                  range: [this.kmSlabs.slabs[lastIndex - 1].range[1],\r\n                  this.kmSlabs.slabs[lastIndex - 1].range[1] + parseInt(data.distance)],\r\n                  cost: parseInt(data.cost),\r\n                  freeDeliveryAmount: parseInt(data.freeDeliveryAmount)\r\n                })\r\n              }\r\n            }\r\n          }\r\n        }\r\n      ]\r\n    });\r\n    await alert.present();\r\n  }\r\n\r\n  async removeSlabs() {\r\n    const alert = await this.alertController.create({\r\n      subHeader: \"Are you sure you want to remove all slabs?\",\r\n      buttons: [\r\n        {\r\n          text: \"No\",\r\n          role: 'cancel',\r\n          cssClass: 'secondary',\r\n          handler: () => {\r\n          }\r\n        }, {\r\n          text: \"Yes\",\r\n          handler: async (data) => {\r\n            this.kmSlabs.slabs = []\r\n          }\r\n        }\r\n      ]\r\n    });\r\n    await alert.present();\r\n  }\r\n\r\n  activeWeightSlab() {\r\n    this.weightSlabs.active = !this.weightSlabs.active\r\n  }\r\n\r\n  async enterWeightSlabData() {\r\n    let adminInput;\r\n    if (this.weightSlabs.slabs.length != 0) {\r\n      adminInput = [\r\n        {\r\n          name: 'weight',\r\n          type: 'number',\r\n          placeholder: \"Add weight for slab in Kgs\"\r\n        },\r\n        {\r\n          name: 'cost',\r\n          type: 'number',\r\n          placeholder: \"Add cost for slab\"\r\n        }\r\n      ]\r\n    }\r\n    else {\r\n      adminInput = [\r\n        {\r\n          name: 'minWeight',\r\n          type: 'number',\r\n          placeholder: \"Add min weight for delivery\"\r\n        },\r\n        {\r\n          name: 'weight',\r\n          type: 'number',\r\n          placeholder: \"Add weight for slab in Kgs\"\r\n        },\r\n        {\r\n          name: 'cost',\r\n          type: 'number',\r\n          placeholder: \"Add cost for slab\"\r\n        }\r\n      ]\r\n    }\r\n    const alert = await this.alertController.create({\r\n      subHeader: \"Enter Slab Details\",\r\n      inputs: adminInput,\r\n      buttons: [\r\n        {\r\n          text: \"cancel\",\r\n          role: 'cancel',\r\n          cssClass: 'secondary',\r\n          handler: () => {\r\n            console.log('Confirm Cancel');\r\n          }\r\n        }, {\r\n          text: \"done\",\r\n          handler: async (data) => {\r\n            if (!data.weight || !data.cost) {\r\n              this.presentAlert(\"Please enter all details!\");\r\n            }\r\n            else {\r\n              if (this.weightSlabs.slabs.length == 0) {\r\n                if (!data.minWeight) {\r\n                  this.presentAlert(\"Please enter all details!\");\r\n                }\r\n                else {\r\n                  this.weightSlabs.slabs.push({\r\n                    range: [parseInt(data.minWeight), parseInt(data.minWeight) + parseInt(data.weight)],\r\n                    cost: parseInt(data.cost)\r\n                  })\r\n                }\r\n              }\r\n              else {\r\n                let lastIndex = this.weightSlabs.slabs.length\r\n                this.weightSlabs.slabs.push({\r\n                  range: [this.weightSlabs.slabs[lastIndex - 1].range[1],\r\n                  this.weightSlabs.slabs[lastIndex - 1].range[1] + parseInt(data.weight)],\r\n                  cost: parseInt(data.cost)\r\n                })\r\n              }\r\n            }\r\n          }\r\n        }\r\n      ]\r\n    });\r\n    await alert.present();\r\n  }\r\n\r\n  async removeWeightSlabs() {\r\n    const alert = await this.alertController.create({\r\n      subHeader: \"Are you sure you want to remove all slabs?\",\r\n      buttons: [\r\n        {\r\n          text: \"No\",\r\n          role: 'cancel',\r\n          cssClass: 'secondary',\r\n          handler: () => {\r\n          }\r\n        }, {\r\n          text: \"Yes\",\r\n          handler: async (data) => {\r\n            this.weightSlabs.slabs = []\r\n          }\r\n        }\r\n      ]\r\n    });\r\n    await alert.present();\r\n  }\r\n\r\n\r\n  freeDeliveryToggle() {\r\n    this.allowFreeDelivery = !this.allowFreeDelivery\r\n  }\r\n\r\n  async createNewDeliveryType() {\r\n    const alert = await this.alertController.create({\r\n      header: 'Enter delivery type name',\r\n      inputs: [\r\n        {\r\n          name: 'deliveryTypeInput',\r\n          type: 'text',\r\n          placeholder: 'Delivery type name'\r\n        },\r\n      ],\r\n      buttons: [\r\n        {\r\n          text: 'Cancel',\r\n          role: 'cancel'\r\n        },\r\n        {\r\n          text: 'Done',\r\n          handler: async (data) => {\r\n            if (data.deliveryTypeInput) {\r\n              console.log('data handler :', data.deliveryTypeInput);\r\n              if (this.newDeliveryType.some(n => n.id === data.deliveryTypeInput.toLowerCase())) {\r\n                this.presentAlert('Type already exists!');\r\n              } else {\r\n                await this.presentLoading();\r\n                const settings = this.getDefaultDeliverySettings();\r\n                this.newDeliveryType.push({ id: data.deliveryTypeInput.toLowerCase(), settings });\r\n                this.events.publish('delivery-settings:saveDeliverySettings', settings, data.deliveryTypeInput);\r\n                console.log(' del type :', this.newDeliveryType);\r\n              }\r\n            }\r\n          }\r\n        }\r\n      ]\r\n    });\r\n\r\n    await alert.present();\r\n  }\r\n\r\n  async newSelection(index: any) {\r\n    console.log('new selection data :', index);\r\n    this.triggeredSelection = index;\r\n    this.currentSelection = this.newDeliveryType[index];\r\n\r\n    // let data = await this.deliverySettingsService.getDeliveryTypeData(this.currentSelection);\r\n    // console.log(data);\r\n    this.setDeliverySettings(this.newDeliveryType[index]['settings']);\r\n    console.log('current selection :', this.currentSelection);\r\n    // selection color \r\n    let prevMsgDiv = document.getElementById(this.selectedIdType);\r\n    prevMsgDiv.style.background = 'white';\r\n    let msgDiv = document.getElementById(`field${index}`);\r\n    msgDiv.style.background = 'var(--ion-color-categories-background)';\r\n    this.selectedIdType = `field${index}`;\r\n  }\r\n\r\n  giveBgColor(index: any){\r\n    // selection color \r\n    let prevMsgDiv = document.getElementById(this.selectedIdType);\r\n    prevMsgDiv.style.background = 'white';\r\n    let msgDiv = document.getElementById(`field${index}`);\r\n    msgDiv.style.background = 'var(--ion-color-categories-background)';\r\n    this.selectedIdType = `field${index}`;\r\n  }\r\n\r\n  getDefaultDeliverySettings() {\r\n    const data = {\r\n      defaultDeliveryAmt: '',\r\n      freeDeliveryAmt: '',\r\n      isStorePickup: false,\r\n      storePickupCharges: '',\r\n      isKmBasedDelivery: false,\r\n      deliveryByWeight: {\r\n        active: false,\r\n        cost: 0,\r\n        baseWeight: 0,\r\n        baseCost: 0\r\n      },\r\n      chargesPerKm: '',\r\n      maxDeliveryOfKm: '',\r\n      isDeliverySchedule: false,\r\n      isDeliveryScheduleMandatory: false,\r\n      deliveryDays: [],\r\n      timeSchedules: [],\r\n      deliveryType: 'pincodes',\r\n      isAllowAllPincodes: true,\r\n      deliveryPincodes: [\r\n      ],\r\n      deliveryAreas: [\r\n        {\r\n          lat: 0,\r\n          lng: 0,\r\n          cost: 0,\r\n          radius: 0,\r\n          active: true,\r\n          minAmnt: null,\r\n          freeDeliveryAmnt: null,\r\n          estimatedDeliveryTime: ''\r\n        }\r\n      ],\r\n      maxDaysOfDelivery: null,\r\n      minHrs: null,\r\n      allowSameDayDelivery: false,\r\n      lastDeliveryTime: moment(new Date().toISOString()).format('hh:mm A'),\r\n      instantDelivery: {\r\n        isActive: false,\r\n        time: null\r\n      },\r\n      isStoreDelivery: { isActive: false, estimatedTime: '' },\r\n      kmSlabs: {\r\n        active: false,\r\n        slabs: []\r\n      },\r\n      weightSlabs: {\r\n        active: false,\r\n        slabs: []\r\n      },\r\n      allowFreeDelivery: true,\r\n      gstPerc: null\r\n    }\r\n    return data;\r\n  }\r\n\r\n  setDeliverySettings(data) {\r\n    if (!this.isEmptyObj(data)) {\r\n      this.defaultDeliveryAmt = data.defaultDeliveryAmt;\r\n      this.freeDeliveryAmt = data.freeDeliveryAmt;\r\n      this.isStorePickup = data.isStorePickup;\r\n      this.storePickupCharges = data.storePickupCharges;\r\n      this.isKmBasedDelivery = data.isKmBasedDelivery;\r\n      this.deliveryByWeight = data.deliveryByWeight || this.deliveryByWeight;\r\n      this.chargesPerKm = data.chargesPerKm;\r\n      this.maxDeliveryOfKm = data.maxDeliveryOfKm ? data.maxDeliveryOfKm : '';\r\n      this.isDeliverySchedule = data.isDeliverySchedule;\r\n      this.isDeliveryScheduleMandatory = typeof data.isDeliveryScheduleMandatory !== 'undefined' ? data.isDeliveryScheduleMandatory : false;\r\n      this.deliveryDays = data.deliveryDays;\r\n      this.timeSchedules = data.timeSchedules;\r\n      this.deliveryType = data.deliveryType ? data.deliveryType : this.deliveryType;\r\n      this.isAllowAllPincodes = data.isAllowAllPincodes;\r\n      for (let index = 0; index < data.deliveryPincodes.length; index++) {\r\n        if (!data.deliveryPincodes[index].hasOwnProperty('estimatedDeliveryTime')) {\r\n          data.deliveryPincodes[index]['estimatedDeliveryTime'] = '';\r\n        }\r\n      }\r\n      this.deliveryPincodes = data.deliveryPincodes;\r\n      this.deliveryAreas = data.deliveryAreas ? data.deliveryAreas : this.deliveryAreas;\r\n      this.maxDaysOfDelivery = data.maxDaysOfDelivery;\r\n      this.allowSameDayDelivery = data.allowSameDayDelivery ? data.allowSameDayDelivery : false;\r\n      this.instantDelivery = data.instantDelivery ? data.instantDelivery : { isActive: false, time: null };\r\n      this.isStoreDelivery = data.isStoreDelivery ? data.isStoreDelivery : { isActive: false, estimatedTime: '' };\r\n      this.minHrs = data.minHrs ? data.minHrs : null;\r\n      this.kmSlabs = data.kmSlabs ? data.kmSlabs : this.kmSlabs\r\n      this.weightSlabs = data.weightSlabs ? data.weightSlabs : this.weightSlabs\r\n      if (data.hasOwnProperty('allowFreeDelivery')) {\r\n        this.allowFreeDelivery = data.allowFreeDelivery\r\n      }\r\n      if (data.lastDeliveryTime) {\r\n        this.lastDeliveryTime = new Date('October 15, 1996' + ' ' + data.lastDeliveryTime).toISOString();\r\n      } else {\r\n        this.lastDeliveryTime = new Date().toISOString();\r\n      }\r\n      for (let index = 0; index < this.days.length; index++) {\r\n        if (this.deliveryDays.indexOf(this.days[index].day) !== -1) {\r\n          this.days[index].active = true;\r\n        }\r\n      }\r\n      if (this.timeSchedules.length > 0) {\r\n        this.getDeliveryDates();\r\n      }\r\n      this.gstPerc = 'gstPerc' in data ? data.gstPerc : null;\r\n    }\r\n  }\r\n  allowInstantDelivery() {\r\n    this.instantDelivery.isActive = !this.instantDelivery.isActive;\r\n  }\r\n\r\n  allowDeliverybyStore() {\r\n    this.isStoreDelivery.isActive = !this.isStoreDelivery.isActive;\r\n  }\r\n\r\n  removeProfile(id: any, idx: any) {\r\n    console.log('called :', id);\r\n    this.removeAlert(id, idx);\r\n  }\r\n\r\n  async removeAlert(id, idx) {\r\n    const removeProfile = await this.alertController.create({\r\n      header: 'Delete Delivery Settings Profile !',\r\n      message: 'Do you want to <Strong>Delete</Strong> this delivery settings profile ?',\r\n      buttons: [\r\n        {\r\n          text: 'Cancel',\r\n          role: 'cancel',\r\n          cssClass: 'secondary',\r\n          handler: () => {\r\n            console.log('Confirm Cancel');\r\n          }\r\n        }, {\r\n          text: 'Okay',\r\n          handler: () => {\r\n            console.log('Confirm Okay');\r\n            this.deliverySettingsService.deleteDeliverySettings(id);\r\n            this.newDeliveryType.splice(idx, 1);\r\n            console.log('new data :', this.newDeliveryType);\r\n            document.getElementById('field0').click();\r\n          }\r\n        }\r\n      ]\r\n    })\r\n    await removeProfile.present();\r\n  }\r\n  \r\n  async openStateModal(i) {\r\n    const modal = await this.modalController.create({\r\n      component: StatesModalPage,\r\n    });\r\n    modal.onDidDismiss()\r\n      .then((res) => {\r\n        console.log('data from modal', res);\r\n        if (res.data) {\r\n          console.log(res.data);\r\n          this.availableLocations.states[i].state = res.data.state, \r\n          this.availableLocations.states[i].stateCode = res.data.code;\r\n        }\r\n      });\r\n    await modal.present();\r\n  }\r\n\r\n  removeLocation(choice, i){\r\n    if (choice == 'states') {\r\n      this.availableLocations.states.splice(i, 1);\r\n    } else if(choice == 'pincodes'){\r\n      this.availableLocations.pincodes.splice(i, 1);\r\n    }\r\n  }\r\n\r\n  addMoreLocation(choice){\r\n    if (choice == 'states') {\r\n      this.availableLocations.states.push({state: '', stateCode: '', types: []});\r\n    } else if(choice == 'pincodes'){\r\n      this.availableLocations.pincodes.push({pincode: '', types: []});\r\n    }\r\n  }\r\n\r\n  async getLocations(){\r\n    this.availableLocations = await this.deliverySettingsService.getLocations();\r\n  }\r\n  setStateTypes(ev, index){\r\n    console.log('ev.target.value',ev.target.value);\r\n    this.availableLocations.states[index].types = ev.target.value;\r\n  }\r\n\r\n  async saveLocations(){\r\n    console.log('this.availableLocations:', this.availableLocations);\r\n    let success = await this.deliverySettingsService.setLocations(this.availableLocations);\r\n    if (success) {\r\n      this.presentAlert('States & Pincodes data saved successfully');\r\n    } else {\r\n      this.presentAlert('Please try again after sometime');\r\n    }\r\n  }\r\n  \r\n}\r\n"],"sourceRoot":""}