{"version":3,"sources":["./src/app/services/import-export-manager/import-export-manager.service.ts"],"names":[],"mappings":"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","file":"default~admin-import-export-manager-delete-bulk-products-delete-bulk-products-module~admin-import-ex~8c99e58d-es5.js","sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { AngularFirestore, AngularFirestoreCollection, AngularFirestoreDocument } from '@angular/fire/firestore';\r\nimport { Events } from '@ionic/angular';\r\nimport { Product } from 'src/app/models/product';\r\nimport { Observable } from 'rxjs';\r\nimport { map, first, take } from 'rxjs/operators';\r\nimport { Subscription } from 'rxjs';\r\nimport { firestore } from 'firebase';\r\nimport { AngularFireStorage } from '@angular/fire/storage/';\r\nimport { ProductImage } from 'src/app/models/image';\r\nimport { environment } from 'src/environments/environment';\r\nimport * as firebase from 'firebase';\r\nimport { LogglyLoggerService } from '../loggly-logger/loggly-logger.service';\r\nimport { Storage } from '@ionic/storage';\r\nimport { convertSnaps } from '../../services/db-utilis';\r\nimport { ConfigService } from 'src/app/services/config/config.service';\r\nimport { SharedService } from '../shared/shared.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ImportExportManagerService {\r\n  allPendingOrdersForAdmin: Promise<any[]>;\r\n  allPaymentFailedOrders: Promise<any[]>;\r\n  allDispatchedOrdersForAdmin: Promise<any[]>;\r\n  allCompletedOrdersForAdmin: Promise<any[]>;\r\n  allCancelledOrders: Promise<any[]>;\r\n  allRejectedOrders: Promise<any[]>;\r\n  allReturnedOrders: Promise<any[]>;\r\n  skuArr: any[] = []\r\n\r\n  constructor(\r\n    private afs: AngularFirestore, \r\n    private events: Events,\r\n    private fbStorage: AngularFireStorage, \r\n    private logglyService: LogglyLoggerService, \r\n    private storage: Storage, \r\n    private configService: ConfigService, \r\n    private sharedService: SharedService\r\n    ) {}\r\n\r\n  async getAllProducts() {\r\n    try {\r\n      let allProducts = []\r\n      let userId = await this.storage.get('uid')\r\n      let userRole = await this.storage.get('userRole')\r\n      if (userRole == 'vendor') {\r\n        let productsRef = await this.afs.collection('products', ref => ref.orderBy('sortedAt', 'desc').where('vendorId', '==', userId))\r\n        productsRef.get().subscribe((snapshot) => {\r\n          snapshot.forEach((product) => {\r\n            allProducts.push({id:product.id, ...product.data()})\r\n          })\r\n        })\r\n        return allProducts\r\n      } else {\r\n        let productsRef = await this.afs.collection('products', ref => ref.orderBy('sortedAt', 'desc'))\r\n        productsRef.get().subscribe((snapshot) => {\r\n          snapshot.forEach((product) => {\r\n            allProducts.push({id:product.id, ...product.data()})\r\n          })\r\n        })\r\n        return allProducts\r\n      }\r\n    } catch (error) {\r\n      console.log('Error in fetching products : ', error);\r\n    }\r\n  }\r\n\r\n  async fetchAllSKU() {\r\n    // const productRef = this.afs.collection('products');\r\n    // let allProductsRef: Subscription = productRef.get().subscribe((querySnapshot: any) => {\r\n    //   querySnapshot.forEach((doc) => {\r\n    //     if ((doc.data().productCode) && (doc.data().productCode !== '')) {\r\n    //       this.skuArr.push({\r\n    //         productCode: doc.data().productCode,\r\n    //         pid: doc.id,\r\n    //       })\r\n    //     }\r\n    //   })\r\n    //   allProductsRef.unsubscribe();\r\n    // })\r\n    const productsData = await this.afs.collection('products')\r\n    let allProductsref: Subscription = productsData.get().subscribe((querySnapshot: any) => {\r\n      querySnapshot.forEach((doc: { data: () => { (): any; new(): any; productCode: any; }; id: any; }) => {\r\n          this.skuArr.push({\r\n            productCode: doc.data().productCode, \r\n            pid: doc.id\r\n          })\r\n      });\r\n      allProductsref.unsubscribe()\r\n    }) \r\n    const ids = this.skuArr.map(o => o.productCode)\r\n    const filtered = this.skuArr.filter(({productCode}, index) => !ids.includes(productCode, index + 1))\r\n    return filtered\r\n  }\r\n\r\n  async deleteBulkProducts(skus: any[]) {\r\n    let count = 0\r\n    if (skus && skus.length) {\r\n      for (const pid of skus) {\r\n        await this.afs.collection('products').doc(pid).delete()\r\n        count ++\r\n      }\r\n    }\r\n    return count\r\n  }\r\n\r\n  async getAllCategories() {\r\n    try {\r\n      let allCategories = []\r\n      let categoryData = await this.afs.collection('categories').valueChanges().pipe(first()).toPromise();\r\n      categoryData.map((category) => {\r\n        allCategories.push(category)\r\n      })\r\n      return allCategories\r\n    } catch (error) {\r\n      console.log('Error in fetching categories : ', error);\r\n    }\r\n  }\r\n\r\n  async getAllSubCategories() {\r\n    let sublist = [];\r\n    const categories = await this.afs.collection('categories', ref => ref\r\n      .orderBy('sortedAt', 'desc')\r\n      .where('status', '==', true)).snapshotChanges().pipe(\r\n        map(snaps => convertSnaps(snaps))).pipe(first()).toPromise();\r\n    for (const c of categories) {\r\n      if (c.isSubcategories) {\r\n        const subcategories: any = await this.getSubcategoriesSidemenu(c.id);\r\n        if (subcategories.length) {\r\n          for (const sc of subcategories) {\r\n            sublist.push({ id: sc.id, categoryId: c.id, name: sc.name, active: false });\r\n          }\r\n        }\r\n      }\r\n    }\r\n    return sublist\r\n  }\r\n\r\n  async getSubcategoriesSidemenu(cid: string) {\r\n    return new Promise(async (resolve, reject) => {\r\n      const subcategories = await this.afs.collection('categories').doc(cid).collection('subcategories', ref =>\r\n        ref.orderBy('sortedAt', 'desc').where('status', '==', true)).snapshotChanges().pipe(\r\n          map(snaps => convertSnaps(snaps))).pipe(first()).toPromise();\r\n      resolve(subcategories);\r\n    });\r\n  }\r\n\r\n  async getAllBrands() {\r\n    try {\r\n      let allBrands = []\r\n      let brandsData = await this.afs.collection('brands').valueChanges().pipe(first()).toPromise();\r\n      brandsData.map((brand) => {\r\n        allBrands.push(brand)\r\n      })\r\n      return allBrands\r\n    } catch (error) {\r\n      console.log('Error in fetching brands : ', error);\r\n    }\r\n  }\r\n\r\n  async getAllVendors() {\r\n    try {\r\n      let allVendors = []\r\n      const vendorRef = await this.afs.collection('users', ref => ref.where('role', '==', 'vendor'))\r\n      vendorRef.get().subscribe((snap) => {\r\n        snap.forEach((v) => {\r\n          allVendors.push({ id: v.id, ...v.data()})\r\n        })\r\n      })\r\n      return allVendors\r\n    } catch (error) {\r\n      console.log('Error in fetching vendors : ', error);\r\n    }\r\n  }\r\n\r\n  async getAllOrders() {\r\n    // console.log('status : ', status)\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        let loginId = await this.storage.get('uid')\r\n        let userRole = await this.storage.get('userRole')\r\n        if (userRole == 'vendor') {\r\n          this.allPendingOrdersForAdmin = this.afs.collection('orders', ref => ref\r\n            .orderBy('createdAt', 'desc')\r\n            .where('vendorId', '==', loginId)).snapshotChanges().pipe(\r\n              map(actions => actions.map(a => {\r\n                const data: any = a.payload.doc.data();\r\n                const id = a.payload.doc.id;\r\n                return { id, ...data };\r\n              }))\r\n            ).pipe(first()).toPromise();\r\n        }\r\n        else {\r\n          let allOrders = [];\r\n          let ordersData: AngularFirestoreCollection<unknown>;\r\n          ordersData = await this.afs.collection('orders', ref => ref.orderBy('createdAt', 'desc'));\r\n          let allOrdersRef: Subscription = ordersData.get().subscribe((querySnapshot: any) => {\r\n            querySnapshot.forEach((doc: { id: any; data: () => any; }) => {\r\n              allOrders.push({ id: doc.id, ...doc.data() })\r\n            });\r\n            resolve(allOrders)\r\n            allOrdersRef.unsubscribe()\r\n          })\r\n        }\r\n      } catch (error) {\r\n        console.log(`Error in fetching all orders : `, error);\r\n        resolve([])\r\n      }\r\n    })\r\n  }\r\n\r\n  async getAllOrdersLength() {\r\n    return new Promise(async (resolve) => {\r\n      try {\r\n        let totalOrders = 0\r\n        const ordersData = this.afs.collection('orders')\r\n        let allOrdersRef: Subscription = ordersData.get().subscribe((snap) => {\r\n          totalOrders = snap.size\r\n          resolve(totalOrders)\r\n          allOrdersRef.unsubscribe()\r\n        })\r\n      } catch (error) {\r\n        console.dir('Error in fetching total orders count : ', error);\r\n        resolve(0);\r\n      }\r\n    })\r\n  }\r\n\r\n  async getAllConfirmedOrders(date?: { start: any; end: any; }) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        let loginId = await this.storage.get('uid')\r\n        let userRole = await this.storage.get('userRole')\r\n        if (userRole == 'vendor') {\r\n          this.allPendingOrdersForAdmin = this.afs.collection('orders', ref => ref\r\n            .orderBy('createdAt', 'desc')\r\n            .where('status', 'in', ['Confirmed']).where('vendorId', '==', loginId)).snapshotChanges().pipe(\r\n              map(actions => actions.map(a => {\r\n                const data: any = a.payload.doc.data();\r\n                const id = a.payload.doc.id;\r\n                return { id, ...data };\r\n              }))\r\n            ).pipe(first()).toPromise();\r\n        }\r\n        else {\r\n          let allOrders = [];\r\n          let ordersData: AngularFirestoreCollection<unknown>;\r\n          if (date && date.start) {\r\n            ordersData = await this.afs.collection('orders', ref => ref.orderBy('createdAt', 'desc').where('status', 'in', ['Confirmed']).startAt(date.start).endAt(date.end));\r\n          } else {\r\n            ordersData = await this.afs.collection('orders', ref => ref.orderBy('createdAt', 'desc').where('status', 'in', ['Confirmed']));\r\n          }\r\n          let allOrdersRef: Subscription = ordersData.get().subscribe((querySnapshot: any) => {\r\n            querySnapshot.forEach((doc: { id: any; data: () => any; }) => {\r\n              allOrders.push({ id: doc.id, ...doc.data() })\r\n            });\r\n            resolve(allOrders)\r\n            allOrdersRef.unsubscribe()\r\n          })\r\n        }\r\n      } catch (error) {\r\n        console.log(error);\r\n      }\r\n    });\r\n  }\r\n\r\n  async getAllOrdersPreset(status: string, startDate: any , endDate: any) {\r\n    console.log('status : ', status)\r\n    console.log('end : ', startDate)\r\n    console.log('start : ', endDate)\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        console.log('here1')\r\n        let ordersRef: any\r\n        let allOrders = []\r\n        let loginId = await this.storage.get('uid')\r\n        let userRole = await this.storage.get('userRole')\r\n        console.log('here2')\r\n        if (userRole == 'vendor') {\r\n          console.log('here3')\r\n          if (status === 'Payment Pending') {\r\n            ordersRef = this.afs.collection('orders', ref => ref\r\n            .orderBy('createdAt', 'desc')\r\n            .where('payment.completed', '==', false).where('vendorId', '==', loginId).startAt(startDate)\r\n            .endAt(endDate)\r\n            )\r\n          } else {\r\n            ordersRef = this.afs.collection('orders', ref => ref\r\n            .orderBy('createdAt', 'desc')\r\n            .where('status', '==', status).where('vendorId', '==', loginId).startAt(startDate)\r\n            .endAt(endDate)\r\n            )\r\n          }\r\n        } else {\r\n          if (status === 'Payment Pending') {\r\n            console.log('here4')\r\n            ordersRef = this.afs.collection('orders', ref => ref\r\n            .orderBy('createdAt', 'desc')\r\n            .where('payment.completed', '==', false).startAt(startDate)\r\n            .endAt(endDate)\r\n            )\r\n          } else {\r\n            console.log('here5')\r\n            ordersRef = this.afs.collection('orders', ref => ref\r\n            .orderBy('createdAt', 'desc')\r\n            .where('status', '==', status).startAt(startDate)\r\n            .endAt(endDate)\r\n            )\r\n          }\r\n        }\r\n        console.log('here6')\r\n        let allOrdersRef: Subscription = ordersRef.get().subscribe((snap: { size: number; forEach: (arg0: (order: any) => void) => void; }) => {\r\n          if (snap.size === 0) {\r\n            resolve([])\r\n          } else {\r\n            snap.forEach((order: any) => {\r\n              allOrders.push({ id: order.id, ...order.data() as {} })\r\n            })\r\n            resolve(allOrders)\r\n          }\r\n          allOrdersRef.unsubscribe()\r\n        })\r\n      } catch (error) {\r\n        console.log(error);\r\n      }\r\n    })\r\n  }\r\n\r\n  async getAllPendingOrders(date?: { start: any; end: any; }) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        let loginId = await this.storage.get('uid')\r\n        let userRole = await this.storage.get('userRole')\r\n        if (userRole == 'vendor') {\r\n          this.allPaymentFailedOrders = this.afs.collection('orders', ref => ref\r\n            .orderBy('createdAt', 'desc')\r\n            .where(\"status\", '==', 'Pending').where('vendorId', '==', loginId)).snapshotChanges().pipe(\r\n              map(actions => actions.map(a => {\r\n                const data: any = a.payload.doc.data();\r\n                const id = a.payload.doc.id;\r\n                return { id, ...data };\r\n              }))\r\n            ).pipe(first()).toPromise();\r\n        }\r\n        else {\r\n          let allOrders = [];\r\n          let ordersData: AngularFirestoreCollection<unknown>;\r\n          if (date && date.start) {\r\n            ordersData = await this.afs.collection('orders', ref => ref.orderBy('createdAt', 'desc').where(\"status\", '==', 'Pending').startAt(date.start).endAt(date.end));\r\n          } else {\r\n            ordersData = await this.afs.collection('orders', ref => ref.orderBy('createdAt', 'desc').where(\"status\", '==', 'Pending'));\r\n          }\r\n          let allOrdersRef: Subscription = ordersData.get().subscribe((querySnapshot: any) => {\r\n            querySnapshot.forEach((doc: { id: any; data: () => any; }) => {\r\n              allOrders.push({ id: doc.id, ...doc.data() })\r\n            });\r\n            resolve(allOrders)\r\n            allOrdersRef.unsubscribe()\r\n          })\r\n        }\r\n      } catch (error) {\r\n        console.log(error);\r\n      }\r\n    });\r\n  }\r\n\r\n  async getAllDispatchedOrders(date?: { start: any; end: any; }) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        let loginId = await this.storage.get('uid')\r\n        let userRole = await this.storage.get('userRole')\r\n        if (userRole == 'vendor') {\r\n          this.allDispatchedOrdersForAdmin = this.afs.collection('orders', ref => ref\r\n            .orderBy('createdAt', 'desc')\r\n            .where('status', 'in', ['Dispatched']).where('vendorId', '==', loginId)).snapshotChanges().pipe(\r\n              map(actions => actions.map(a => {\r\n                const data: any = a.payload.doc.data();\r\n                const id = a.payload.doc.id;\r\n                return { id, ...data };\r\n              }))\r\n            ).pipe(first()).toPromise();\r\n        }\r\n        else {\r\n          let allOrders = [];\r\n          let ordersData: AngularFirestoreCollection<unknown>;\r\n          if (date && date.start) {\r\n            ordersData = await this.afs.collection('orders', ref => ref.orderBy('createdAt', 'desc').where('status', 'in', ['Dispatched']).startAt(date.start).endAt(date.end));\r\n          } else {\r\n            ordersData = await this.afs.collection('orders', ref => ref.orderBy('createdAt', 'desc').where('status', 'in', ['Dispatched']));\r\n          }\r\n          let allOrdersRef: Subscription = ordersData.get().subscribe((querySnapshot: any) => {\r\n            querySnapshot.forEach((doc: { id: any; data: () => any; }) => {\r\n              allOrders.push({ id: doc.id, ...doc.data() })\r\n            });\r\n            resolve(allOrders)\r\n            allOrdersRef.unsubscribe()\r\n          })\r\n        }\r\n      } catch (error) {\r\n        console.log(error);\r\n      }\r\n    });\r\n  }\r\n\r\n  async getAllDeliveredOrders(date?: { start: any; end: any; }) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        let loginId = await this.storage.get('uid')\r\n        let userRole = await this.storage.get('userRole')\r\n        if (userRole == 'vendor') {\r\n          this.allCompletedOrdersForAdmin = this.afs.collection('orders', ref => ref\r\n            .orderBy('createdAt', 'desc')\r\n            .where('status', 'in', ['Delivered']).where('vendorId', '==', loginId)).snapshotChanges().pipe(\r\n              map(actions => actions.map(a => {\r\n                const data: any = a.payload.doc.data();\r\n                const id = a.payload.doc.id;\r\n                return { id, ...data };\r\n              }))\r\n            ).pipe(first()).toPromise();\r\n        }\r\n        else {\r\n          let allOrders = [];\r\n          let ordersData: AngularFirestoreCollection<unknown>;\r\n          if (date && date.start) {\r\n            ordersData = await this.afs.collection('orders', ref => ref.orderBy('createdAt', 'desc').where('status', 'in', ['Delivered']).startAt(date.start).endAt(date.end));\r\n          } else {\r\n            ordersData = await this.afs.collection('orders', ref => ref.orderBy('createdAt', 'desc').where('status', 'in', ['Delivered']));\r\n          }\r\n          let allOrdersRef: Subscription = ordersData.get().subscribe((querySnapshot: any) => {\r\n            querySnapshot.forEach((doc: { id: any; data: () => any; }) => {\r\n              allOrders.push({ id: doc.id, ...doc.data() })\r\n            });\r\n            resolve(allOrders)\r\n            allOrdersRef.unsubscribe()\r\n          })\r\n        }\r\n      } catch (error) {\r\n        console.log(error);\r\n      }\r\n    });\r\n  }\r\n\r\n  async getAllCancelledOrders(date?: { start: any; end: any; }) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        let loginId = await this.storage.get('uid')\r\n        let userRole = await this.storage.get('userRole')\r\n        if (userRole == 'vendor') {\r\n          this.allCancelledOrders = this.afs.collection('orders', ref => ref\r\n            .orderBy('createdAt', 'desc').where(\"status\", 'in', 'Cancelled').where('vendorId', '==', loginId)).snapshotChanges().pipe(\r\n              map(actions => actions.map(a => {\r\n                const data: any = a.payload.doc.data();\r\n                const id = a.payload.doc.id;\r\n                return { id, ...data };\r\n              }))\r\n            ).pipe(first()).toPromise();\r\n        }\r\n        else {\r\n          let allOrders = [];\r\n          let ordersData: AngularFirestoreCollection<unknown>;\r\n          if (date && date.start) {\r\n            ordersData = await this.afs.collection('orders', ref => ref.orderBy('createdAt', 'desc').where(\"status\", 'in', ['Cancelled']).startAt(date.start).endAt(date.end));\r\n          } else {\r\n            ordersData = await this.afs.collection('orders', ref => ref.orderBy('createdAt', 'desc').where(\"status\", 'in', ['Cancelled']));\r\n          }\r\n          let allOrdersRef: Subscription = ordersData.get().subscribe((querySnapshot: any) => {\r\n            querySnapshot.forEach((doc: { id: any; data: () => any; }) => {\r\n              allOrders.push({ id: doc.id, ...doc.data() })\r\n            });\r\n            resolve(allOrders)\r\n            allOrdersRef.unsubscribe()\r\n          })\r\n        }\r\n      } catch (error) {\r\n        console.log(error);\r\n      }\r\n    });\r\n  }\r\n\r\n  async getAllRejectedOrders(date?: { start: any; end: any; }) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        let loginId = await this.storage.get('uid')\r\n        let userRole = await this.storage.get('userRole')\r\n        if (userRole == 'vendor') {\r\n          this.allRejectedOrders = this.afs.collection('orders', ref => ref\r\n            .orderBy('createdAt', 'desc').where(\"status\", 'in', ['Rejected']).where('vendorId', '==', loginId)).snapshotChanges().pipe(\r\n              map(actions => actions.map(a => {\r\n                const data: any = a.payload.doc.data();\r\n                const id = a.payload.doc.id;\r\n                return { id, ...data };\r\n              }))\r\n            ).pipe(first()).toPromise();\r\n        }\r\n        else {\r\n          let allOrders = [];\r\n          let ordersData: AngularFirestoreCollection<unknown>;\r\n          if (date && date.start) {\r\n            ordersData = await this.afs.collection('orders', ref => ref.orderBy('createdAt', 'desc').where(\"status\", 'in', ['Rejected']).startAt(date.start).endAt(date.end));\r\n          } else {\r\n            ordersData = await this.afs.collection('orders', ref => ref.orderBy('createdAt', 'desc').where(\"status\", 'in', ['Rejected']));\r\n          }\r\n          let allOrdersRef: Subscription = ordersData.get().subscribe((querySnapshot: any) => {\r\n            querySnapshot.forEach((doc: { id: any; data: () => any; }) => {\r\n              allOrders.push({ id: doc.id, ...doc.data() })\r\n            });\r\n            resolve(allOrders)\r\n            allOrdersRef.unsubscribe()\r\n          })\r\n        }\r\n      } catch (error) {\r\n        console.log(error);\r\n      }\r\n    });\r\n  }\r\n\r\n  async getAllReturnedOrders(date?: { start: any; end: any; }) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        let loginId = await this.storage.get('uid')\r\n        let userRole = await this.storage.get('userRole')\r\n        if (userRole == 'vendor') {\r\n          this.allReturnedOrders = this.afs.collection('orders', ref => ref\r\n            .orderBy('createdAt', 'desc')\r\n            .where(\"status\", '==', 'Returned').where('vendorId', '==', loginId)).snapshotChanges().pipe(\r\n              map(actions => actions.map(a => {\r\n                const data: any = a.payload.doc.data();\r\n                const id = a.payload.doc.id;\r\n                return { id, ...data };\r\n              }))\r\n            ).pipe(first()).toPromise();\r\n        }\r\n        else {\r\n          let allOrders = [];\r\n          let ordersData: AngularFirestoreCollection<unknown>;\r\n          if (date && date.start) {\r\n            ordersData = await this.afs.collection('orders', ref => ref.orderBy('createdAt', 'desc').where(\"status\", '==', 'Returned').startAt(date.start).endAt(date.end));\r\n          } else {\r\n            ordersData = await this.afs.collection('orders', ref => ref.orderBy('createdAt', 'desc').where(\"status\", '==', 'Returned'));\r\n          }\r\n          let allOrdersRef: Subscription = ordersData.get().subscribe((querySnapshot: any) => {\r\n            querySnapshot.forEach((doc: { id: any; data: () => any; }) => {\r\n              allOrders.push({ id: doc.id, ...doc.data() })\r\n            });\r\n            resolve(allOrders)\r\n            allOrdersRef.unsubscribe()\r\n          })\r\n        }\r\n      } catch (error) {\r\n        console.log(error);\r\n      }\r\n    });\r\n  }\r\n\r\n  async getAllPaymentPendingOrders(date?: { start: any; end: any; }) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        let loginId = await this.storage.get('uid')\r\n        let userRole = await this.storage.get('userRole')\r\n        if (userRole == 'vendor') {\r\n          this.allReturnedOrders = this.afs.collection('orders', ref => ref\r\n            .orderBy('createdAt', 'desc')\r\n            .where(\"status\", '==', 'Returned').where('vendorId', '==', loginId)).snapshotChanges().pipe(\r\n              map(actions => actions.map(a => {\r\n                const data: any = a.payload.doc.data();\r\n                const id = a.payload.doc.id;\r\n                return { id, ...data };\r\n              }))\r\n            ).pipe(first()).toPromise();\r\n        }\r\n        else {\r\n          let allOrders = [];\r\n          let ordersData: AngularFirestoreCollection<unknown>;\r\n          if (date && date.start) {\r\n            ordersData = await this.afs.collection('orders', ref => ref.orderBy('createdAt', 'desc').where(\"payment.completed\", '==', false).startAt(date.start).endAt(date.end));\r\n          } else {\r\n            ordersData = await this.afs.collection('orders', ref => ref.orderBy('createdAt', 'desc').where(\"payment.completed\", '==', false));\r\n          }\r\n          let allOrdersRef: Subscription = ordersData.get().subscribe((querySnapshot: any) => {\r\n            querySnapshot.forEach((doc: { id: any; data: () => any; }) => {\r\n              allOrders.push({ id: doc.id, ...doc.data() })\r\n            });\r\n            resolve(allOrders)\r\n            allOrdersRef.unsubscribe()\r\n          })\r\n        }\r\n      } catch (error) {\r\n        console.log(error);\r\n      }\r\n    });\r\n  }\r\n\r\n  async getAllDeliveryAgents() {\r\n    return new Promise(async (resolve) => {\r\n      try {\r\n        let deliveryAgents = []\r\n        const usersRef = await this.afs.collection('users', ref => ref.where('role', '==', 'deliveryAgent'))\r\n        usersRef.get().subscribe((snap) => {\r\n          snap.forEach((v) => {\r\n            deliveryAgents.push({ id: v.id, ...v.data()})\r\n          })\r\n        })\r\n        resolve(deliveryAgents)\r\n      } catch (error) {\r\n        console.log(error);\r\n      }\r\n    })\r\n  }\r\n\r\n  async updateOrder(orderId: number, agentId: string) {\r\n    return new Promise(async (resolve) => {\r\n      try {\r\n        const orderRef = this.afs.collection('orders', ref => ref.where('orderId', '==', orderId));\r\n        const orderData: any = await orderRef.snapshotChanges().pipe(\r\n          map(actions => actions.map(a => {\r\n            const data: any = a.payload.doc.data();\r\n            const id = a.payload.doc.id;\r\n            return { id, ...data };\r\n          }))\r\n        ).pipe(first()).toPromise();\r\n        let updateOrder = await this.afs.collection('orders').doc(orderData[0].id).update({ deliveryAgentId: agentId, deliveryStatus: 'notStarted' });\r\n        console.log('updated order', updateOrder)\r\n      } catch (error) {\r\n        console.log(error);\r\n      }\r\n    })\r\n  }\r\n\r\n  async getUserByRole(role: string, custom?: string) {\r\n    return new Promise(async (resolve) => {\r\n      try {\r\n        let allUsers = []\r\n        let userRef: AngularFirestoreCollection<unknown>\r\n        if (role === 'all') {\r\n          userRef = await this.afs.collection('users');\r\n        } else {\r\n          userRef = await this.afs.collection('users', ref => ref.where('role', '==', role));\r\n        }\r\n        let allUsersRef: Subscription = userRef.get().subscribe((querySnapshot: any) => {\r\n          querySnapshot.forEach((doc: { id: any; data: () => any; }) => {\r\n            if (custom === 'custom-justNumbers') {\r\n              allUsers.push(doc.data().phoneNo)\r\n            } else {\r\n              allUsers.push({ id: doc.id, ...doc.data() })\r\n            }\r\n          });\r\n          resolve(allUsers)\r\n          allUsersRef.unsubscribe()\r\n        })\r\n      } catch (error) {\r\n        console.log(error);\r\n        resolve([])\r\n      }\r\n    })\r\n  }\r\n\r\n  async getAllUsersCount() {\r\n    return new Promise(async (resolve) => {\r\n      try {\r\n        let totalUsers = 0\r\n        const UsersData = this.afs.collection('users')\r\n        let allUsersRef: Subscription = UsersData.get().subscribe((snap) => {\r\n          totalUsers = snap.size\r\n          resolve(totalUsers)\r\n          allUsersRef.unsubscribe()\r\n        })\r\n      } catch (err) {\r\n        console.dir(err);\r\n        resolve(0)\r\n      }\r\n    })\r\n  }\r\n\r\n  async addUserByAdmin(userDetails: any) {\r\n    return new Promise(async (resolve) => {\r\n      let addUserDetails = firebase.functions().httpsCallable('users-addUserByAdmin');\r\n    addUserDetails(userDetails).then(async (res) => {\r\n      if (res.data.status && res.data.status === 'success') {\r\n        console.log(`Successfully Added User - ${userDetails.name} : `, res.data)\r\n        resolve({status : res.data.status, data: userDetails})\r\n      } else {\r\n        console.log(`Failed To Add User - ${userDetails.name} : `, res.data)\r\n        resolve({status : res.data.status, data: userDetails})\r\n      }\r\n    });\r\n    })\r\n  }\r\n\r\n  async getAllFilters() {\r\n    return new Promise ( async (resolve) => {\r\n      try {\r\n        let allFilters = []\r\n        let filtersRef: AngularFirestoreCollection<unknown>\r\n        filtersRef = this.afs.collection('features').doc('filters').collection('list')\r\n        let allFiltersRef: Subscription = filtersRef.get().subscribe((querySnapshot: any) => {\r\n          querySnapshot.forEach((doc: { id: any; data: () => any; }) => {\r\n            if (doc.data().active) {\r\n              allFilters.push({name: doc.data().name, value: doc.data().values || []})\r\n            }\r\n          });\r\n          resolve(allFilters)\r\n          allFiltersRef.unsubscribe()\r\n        })\r\n      } catch (error) {\r\n        console.dir(error);\r\n        resolve(0)\r\n      }\r\n    } )\r\n  }\r\n\r\n}\r\n"],"sourceRoot":""}