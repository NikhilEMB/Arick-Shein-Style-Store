{"version":3,"sources":["./src/app/services/import-export-manager/import-export-manager.service.ts"],"names":[],"mappings":"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","file":"default~admin-import-export-manager-delete-bulk-products-delete-bulk-products-module~admin-import-ex~8c99e58d-es2015.js","sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { AngularFirestore, AngularFirestoreCollection, AngularFirestoreDocument } from '@angular/fire/firestore';\r\nimport { Events } from '@ionic/angular';\r\nimport { Product } from 'src/app/models/product';\r\nimport { Observable } from 'rxjs';\r\nimport { map, first, take } from 'rxjs/operators';\r\nimport { Subscription } from 'rxjs';\r\nimport { firestore } from 'firebase';\r\nimport { AngularFireStorage } from '@angular/fire/storage/';\r\nimport { ProductImage } from 'src/app/models/image';\r\nimport { environment } from 'src/environments/environment';\r\nimport * as firebase from 'firebase';\r\nimport { LogglyLoggerService } from '../loggly-logger/loggly-logger.service';\r\nimport { Storage } from '@ionic/storage';\r\nimport { convertSnaps } from '../../services/db-utilis';\r\nimport { ConfigService } from 'src/app/services/config/config.service';\r\nimport { SharedService } from '../shared/shared.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ImportExportManagerService {\r\n  allPendingOrdersForAdmin: Promise<any[]>;\r\n  allPaymentFailedOrders: Promise<any[]>;\r\n  allDispatchedOrdersForAdmin: Promise<any[]>;\r\n  allCompletedOrdersForAdmin: Promise<any[]>;\r\n  allCancelledOrders: Promise<any[]>;\r\n  allRejectedOrders: Promise<any[]>;\r\n  allReturnedOrders: Promise<any[]>;\r\n  skuArr: any[] = []\r\n\r\n  constructor(\r\n    private afs: AngularFirestore, \r\n    private events: Events,\r\n    private fbStorage: AngularFireStorage, \r\n    private logglyService: LogglyLoggerService, \r\n    private storage: Storage, \r\n    private configService: ConfigService, \r\n    private sharedService: SharedService\r\n    ) {}\r\n\r\n  async getAllProducts() {\r\n    try {\r\n      let allProducts = []\r\n      let userId = await this.storage.get('uid')\r\n      let userRole = await this.storage.get('userRole')\r\n      if (userRole == 'vendor') {\r\n        let productsRef = await this.afs.collection('products', ref => ref.orderBy('sortedAt', 'desc').where('vendorId', '==', userId))\r\n        productsRef.get().subscribe((snapshot) => {\r\n          snapshot.forEach((product) => {\r\n            allProducts.push({id:product.id, ...product.data()})\r\n          })\r\n        })\r\n        return allProducts\r\n      } else {\r\n        let productsRef = await this.afs.collection('products', ref => ref.orderBy('sortedAt', 'desc'))\r\n        productsRef.get().subscribe((snapshot) => {\r\n          snapshot.forEach((product) => {\r\n            allProducts.push({id:product.id, ...product.data()})\r\n          })\r\n        })\r\n        return allProducts\r\n      }\r\n    } catch (error) {\r\n      console.log('Error in fetching products : ', error);\r\n    }\r\n  }\r\n\r\n  async fetchAllSKU() {\r\n    // const productRef = this.afs.collection('products');\r\n    // let allProductsRef: Subscription = productRef.get().subscribe((querySnapshot: any) => {\r\n    //   querySnapshot.forEach((doc) => {\r\n    //     if ((doc.data().productCode) && (doc.data().productCode !== '')) {\r\n    //       this.skuArr.push({\r\n    //         productCode: doc.data().productCode,\r\n    //         pid: doc.id,\r\n    //       })\r\n    //     }\r\n    //   })\r\n    //   allProductsRef.unsubscribe();\r\n    // })\r\n    const productsData = await this.afs.collection('products')\r\n    let allProductsref: Subscription = productsData.get().subscribe((querySnapshot: any) => {\r\n      querySnapshot.forEach((doc: { data: () => { (): any; new(): any; productCode: any; }; id: any; }) => {\r\n          this.skuArr.push({\r\n            productCode: doc.data().productCode, \r\n            pid: doc.id\r\n          })\r\n      });\r\n      allProductsref.unsubscribe()\r\n    }) \r\n    const ids = this.skuArr.map(o => o.productCode)\r\n    const filtered = this.skuArr.filter(({productCode}, index) => !ids.includes(productCode, index + 1))\r\n    return filtered\r\n  }\r\n\r\n  async deleteBulkProducts(skus: any[]) {\r\n    let count = 0\r\n    if (skus && skus.length) {\r\n      for (const pid of skus) {\r\n        await this.afs.collection('products').doc(pid).delete()\r\n        count ++\r\n      }\r\n    }\r\n    return count\r\n  }\r\n\r\n  async getAllCategories() {\r\n    try {\r\n      let allCategories = []\r\n      let categoryData = await this.afs.collection('categories').valueChanges().pipe(first()).toPromise();\r\n      categoryData.map((category) => {\r\n        allCategories.push(category)\r\n      })\r\n      return allCategories\r\n    } catch (error) {\r\n      console.log('Error in fetching categories : ', error);\r\n    }\r\n  }\r\n\r\n  async getAllSubCategories() {\r\n    let sublist = [];\r\n    const categories = await this.afs.collection('categories', ref => ref\r\n      .orderBy('sortedAt', 'desc')\r\n      .where('status', '==', true)).snapshotChanges().pipe(\r\n        map(snaps => convertSnaps(snaps))).pipe(first()).toPromise();\r\n    for (const c of categories) {\r\n      if (c.isSubcategories) {\r\n        const subcategories: any = await this.getSubcategoriesSidemenu(c.id);\r\n        if (subcategories.length) {\r\n          for (const sc of subcategories) {\r\n            sublist.push({ id: sc.id, categoryId: c.id, name: sc.name, active: false });\r\n          }\r\n        }\r\n      }\r\n    }\r\n    return sublist\r\n  }\r\n\r\n  async getSubcategoriesSidemenu(cid: string) {\r\n    return new Promise(async (resolve, reject) => {\r\n      const subcategories = await this.afs.collection('categories').doc(cid).collection('subcategories', ref =>\r\n        ref.orderBy('sortedAt', 'desc').where('status', '==', true)).snapshotChanges().pipe(\r\n          map(snaps => convertSnaps(snaps))).pipe(first()).toPromise();\r\n      resolve(subcategories);\r\n    });\r\n  }\r\n\r\n  async getAllBrands() {\r\n    try {\r\n      let allBrands = []\r\n      let brandsData = await this.afs.collection('brands').valueChanges().pipe(first()).toPromise();\r\n      brandsData.map((brand) => {\r\n        allBrands.push(brand)\r\n      })\r\n      return allBrands\r\n    } catch (error) {\r\n      console.log('Error in fetching brands : ', error);\r\n    }\r\n  }\r\n\r\n  async getAllVendors() {\r\n    try {\r\n      let allVendors = []\r\n      const vendorRef = await this.afs.collection('users', ref => ref.where('role', '==', 'vendor'))\r\n      vendorRef.get().subscribe((snap) => {\r\n        snap.forEach((v) => {\r\n          allVendors.push({ id: v.id, ...v.data()})\r\n        })\r\n      })\r\n      return allVendors\r\n    } catch (error) {\r\n      console.log('Error in fetching vendors : ', error);\r\n    }\r\n  }\r\n\r\n  async getAllOrders() {\r\n    // console.log('status : ', status)\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        let loginId = await this.storage.get('uid')\r\n        let userRole = await this.storage.get('userRole')\r\n        if (userRole == 'vendor') {\r\n          this.allPendingOrdersForAdmin = this.afs.collection('orders', ref => ref\r\n            .orderBy('createdAt', 'desc')\r\n            .where('vendorId', '==', loginId)).snapshotChanges().pipe(\r\n              map(actions => actions.map(a => {\r\n                const data: any = a.payload.doc.data();\r\n                const id = a.payload.doc.id;\r\n                return { id, ...data };\r\n              }))\r\n            ).pipe(first()).toPromise();\r\n        }\r\n        else {\r\n          let allOrders = [];\r\n          let ordersData: AngularFirestoreCollection<unknown>;\r\n          ordersData = await this.afs.collection('orders', ref => ref.orderBy('createdAt', 'desc'));\r\n          let allOrdersRef: Subscription = ordersData.get().subscribe((querySnapshot: any) => {\r\n            querySnapshot.forEach((doc: { id: any; data: () => any; }) => {\r\n              allOrders.push({ id: doc.id, ...doc.data() })\r\n            });\r\n            resolve(allOrders)\r\n            allOrdersRef.unsubscribe()\r\n          })\r\n        }\r\n      } catch (error) {\r\n        console.log(`Error in fetching all orders : `, error);\r\n        resolve([])\r\n      }\r\n    })\r\n  }\r\n\r\n  async getAllOrdersLength() {\r\n    return new Promise(async (resolve) => {\r\n      try {\r\n        let totalOrders = 0\r\n        const ordersData = this.afs.collection('orders')\r\n        let allOrdersRef: Subscription = ordersData.get().subscribe((snap) => {\r\n          totalOrders = snap.size\r\n          resolve(totalOrders)\r\n          allOrdersRef.unsubscribe()\r\n        })\r\n      } catch (error) {\r\n        console.dir('Error in fetching total orders count : ', error);\r\n        resolve(0);\r\n      }\r\n    })\r\n  }\r\n\r\n  async getAllConfirmedOrders(date?: { start: any; end: any; }) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        let loginId = await this.storage.get('uid')\r\n        let userRole = await this.storage.get('userRole')\r\n        if (userRole == 'vendor') {\r\n          this.allPendingOrdersForAdmin = this.afs.collection('orders', ref => ref\r\n            .orderBy('createdAt', 'desc')\r\n            .where('status', 'in', ['Confirmed']).where('vendorId', '==', loginId)).snapshotChanges().pipe(\r\n              map(actions => actions.map(a => {\r\n                const data: any = a.payload.doc.data();\r\n                const id = a.payload.doc.id;\r\n                return { id, ...data };\r\n              }))\r\n            ).pipe(first()).toPromise();\r\n        }\r\n        else {\r\n          let allOrders = [];\r\n          let ordersData: AngularFirestoreCollection<unknown>;\r\n          if (date && date.start) {\r\n            ordersData = await this.afs.collection('orders', ref => ref.orderBy('createdAt', 'desc').where('status', 'in', ['Confirmed']).startAt(date.start).endAt(date.end));\r\n          } else {\r\n            ordersData = await this.afs.collection('orders', ref => ref.orderBy('createdAt', 'desc').where('status', 'in', ['Confirmed']));\r\n          }\r\n          let allOrdersRef: Subscription = ordersData.get().subscribe((querySnapshot: any) => {\r\n            querySnapshot.forEach((doc: { id: any; data: () => any; }) => {\r\n              allOrders.push({ id: doc.id, ...doc.data() })\r\n            });\r\n            resolve(allOrders)\r\n            allOrdersRef.unsubscribe()\r\n          })\r\n        }\r\n      } catch (error) {\r\n        console.log(error);\r\n      }\r\n    });\r\n  }\r\n\r\n  async getAllOrdersPreset(status: string, startDate: any , endDate: any) {\r\n    console.log('status : ', status)\r\n    console.log('end : ', startDate)\r\n    console.log('start : ', endDate)\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        console.log('here1')\r\n        let ordersRef: any\r\n        let allOrders = []\r\n        let loginId = await this.storage.get('uid')\r\n        let userRole = await this.storage.get('userRole')\r\n        console.log('here2')\r\n        if (userRole == 'vendor') {\r\n          console.log('here3')\r\n          if (status === 'Payment Pending') {\r\n            ordersRef = this.afs.collection('orders', ref => ref\r\n            .orderBy('createdAt', 'desc')\r\n            .where('payment.completed', '==', false).where('vendorId', '==', loginId).startAt(startDate)\r\n            .endAt(endDate)\r\n            )\r\n          } else {\r\n            ordersRef = this.afs.collection('orders', ref => ref\r\n            .orderBy('createdAt', 'desc')\r\n            .where('status', '==', status).where('vendorId', '==', loginId).startAt(startDate)\r\n            .endAt(endDate)\r\n            )\r\n          }\r\n        } else {\r\n          if (status === 'Payment Pending') {\r\n            console.log('here4')\r\n            ordersRef = this.afs.collection('orders', ref => ref\r\n            .orderBy('createdAt', 'desc')\r\n            .where('payment.completed', '==', false).startAt(startDate)\r\n            .endAt(endDate)\r\n            )\r\n          } else {\r\n            console.log('here5')\r\n            ordersRef = this.afs.collection('orders', ref => ref\r\n            .orderBy('createdAt', 'desc')\r\n            .where('status', '==', status).startAt(startDate)\r\n            .endAt(endDate)\r\n            )\r\n          }\r\n        }\r\n        console.log('here6')\r\n        let allOrdersRef: Subscription = ordersRef.get().subscribe((snap: { size: number; forEach: (arg0: (order: any) => void) => void; }) => {\r\n          if (snap.size === 0) {\r\n            resolve([])\r\n          } else {\r\n            snap.forEach((order: any) => {\r\n              allOrders.push({ id: order.id, ...order.data() as {} })\r\n            })\r\n            resolve(allOrders)\r\n          }\r\n          allOrdersRef.unsubscribe()\r\n        })\r\n      } catch (error) {\r\n        console.log(error);\r\n      }\r\n    })\r\n  }\r\n\r\n  async getAllPendingOrders(date?: { start: any; end: any; }) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        let loginId = await this.storage.get('uid')\r\n        let userRole = await this.storage.get('userRole')\r\n        if (userRole == 'vendor') {\r\n          this.allPaymentFailedOrders = this.afs.collection('orders', ref => ref\r\n            .orderBy('createdAt', 'desc')\r\n            .where(\"status\", '==', 'Pending').where('vendorId', '==', loginId)).snapshotChanges().pipe(\r\n              map(actions => actions.map(a => {\r\n                const data: any = a.payload.doc.data();\r\n                const id = a.payload.doc.id;\r\n                return { id, ...data };\r\n              }))\r\n            ).pipe(first()).toPromise();\r\n        }\r\n        else {\r\n          let allOrders = [];\r\n          let ordersData: AngularFirestoreCollection<unknown>;\r\n          if (date && date.start) {\r\n            ordersData = await this.afs.collection('orders', ref => ref.orderBy('createdAt', 'desc').where(\"status\", '==', 'Pending').startAt(date.start).endAt(date.end));\r\n          } else {\r\n            ordersData = await this.afs.collection('orders', ref => ref.orderBy('createdAt', 'desc').where(\"status\", '==', 'Pending'));\r\n          }\r\n          let allOrdersRef: Subscription = ordersData.get().subscribe((querySnapshot: any) => {\r\n            querySnapshot.forEach((doc: { id: any; data: () => any; }) => {\r\n              allOrders.push({ id: doc.id, ...doc.data() })\r\n            });\r\n            resolve(allOrders)\r\n            allOrdersRef.unsubscribe()\r\n          })\r\n        }\r\n      } catch (error) {\r\n        console.log(error);\r\n      }\r\n    });\r\n  }\r\n\r\n  async getAllDispatchedOrders(date?: { start: any; end: any; }) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        let loginId = await this.storage.get('uid')\r\n        let userRole = await this.storage.get('userRole')\r\n        if (userRole == 'vendor') {\r\n          this.allDispatchedOrdersForAdmin = this.afs.collection('orders', ref => ref\r\n            .orderBy('createdAt', 'desc')\r\n            .where('status', 'in', ['Dispatched']).where('vendorId', '==', loginId)).snapshotChanges().pipe(\r\n              map(actions => actions.map(a => {\r\n                const data: any = a.payload.doc.data();\r\n                const id = a.payload.doc.id;\r\n                return { id, ...data };\r\n              }))\r\n            ).pipe(first()).toPromise();\r\n        }\r\n        else {\r\n          let allOrders = [];\r\n          let ordersData: AngularFirestoreCollection<unknown>;\r\n          if (date && date.start) {\r\n            ordersData = await this.afs.collection('orders', ref => ref.orderBy('createdAt', 'desc').where('status', 'in', ['Dispatched']).startAt(date.start).endAt(date.end));\r\n          } else {\r\n            ordersData = await this.afs.collection('orders', ref => ref.orderBy('createdAt', 'desc').where('status', 'in', ['Dispatched']));\r\n          }\r\n          let allOrdersRef: Subscription = ordersData.get().subscribe((querySnapshot: any) => {\r\n            querySnapshot.forEach((doc: { id: any; data: () => any; }) => {\r\n              allOrders.push({ id: doc.id, ...doc.data() })\r\n            });\r\n            resolve(allOrders)\r\n            allOrdersRef.unsubscribe()\r\n          })\r\n        }\r\n      } catch (error) {\r\n        console.log(error);\r\n      }\r\n    });\r\n  }\r\n\r\n  async getAllDeliveredOrders(date?: { start: any; end: any; }) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        let loginId = await this.storage.get('uid')\r\n        let userRole = await this.storage.get('userRole')\r\n        if (userRole == 'vendor') {\r\n          this.allCompletedOrdersForAdmin = this.afs.collection('orders', ref => ref\r\n            .orderBy('createdAt', 'desc')\r\n            .where('status', 'in', ['Delivered']).where('vendorId', '==', loginId)).snapshotChanges().pipe(\r\n              map(actions => actions.map(a => {\r\n                const data: any = a.payload.doc.data();\r\n                const id = a.payload.doc.id;\r\n                return { id, ...data };\r\n              }))\r\n            ).pipe(first()).toPromise();\r\n        }\r\n        else {\r\n          let allOrders = [];\r\n          let ordersData: AngularFirestoreCollection<unknown>;\r\n          if (date && date.start) {\r\n            ordersData = await this.afs.collection('orders', ref => ref.orderBy('createdAt', 'desc').where('status', 'in', ['Delivered']).startAt(date.start).endAt(date.end));\r\n          } else {\r\n            ordersData = await this.afs.collection('orders', ref => ref.orderBy('createdAt', 'desc').where('status', 'in', ['Delivered']));\r\n          }\r\n          let allOrdersRef: Subscription = ordersData.get().subscribe((querySnapshot: any) => {\r\n            querySnapshot.forEach((doc: { id: any; data: () => any; }) => {\r\n              allOrders.push({ id: doc.id, ...doc.data() })\r\n            });\r\n            resolve(allOrders)\r\n            allOrdersRef.unsubscribe()\r\n          })\r\n        }\r\n      } catch (error) {\r\n        console.log(error);\r\n      }\r\n    });\r\n  }\r\n\r\n  async getAllCancelledOrders(date?: { start: any; end: any; }) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        let loginId = await this.storage.get('uid')\r\n        let userRole = await this.storage.get('userRole')\r\n        if (userRole == 'vendor') {\r\n          this.allCancelledOrders = this.afs.collection('orders', ref => ref\r\n            .orderBy('createdAt', 'desc').where(\"status\", 'in', 'Cancelled').where('vendorId', '==', loginId)).snapshotChanges().pipe(\r\n              map(actions => actions.map(a => {\r\n                const data: any = a.payload.doc.data();\r\n                const id = a.payload.doc.id;\r\n                return { id, ...data };\r\n              }))\r\n            ).pipe(first()).toPromise();\r\n        }\r\n        else {\r\n          let allOrders = [];\r\n          let ordersData: AngularFirestoreCollection<unknown>;\r\n          if (date && date.start) {\r\n            ordersData = await this.afs.collection('orders', ref => ref.orderBy('createdAt', 'desc').where(\"status\", 'in', ['Cancelled']).startAt(date.start).endAt(date.end));\r\n          } else {\r\n            ordersData = await this.afs.collection('orders', ref => ref.orderBy('createdAt', 'desc').where(\"status\", 'in', ['Cancelled']));\r\n          }\r\n          let allOrdersRef: Subscription = ordersData.get().subscribe((querySnapshot: any) => {\r\n            querySnapshot.forEach((doc: { id: any; data: () => any; }) => {\r\n              allOrders.push({ id: doc.id, ...doc.data() })\r\n            });\r\n            resolve(allOrders)\r\n            allOrdersRef.unsubscribe()\r\n          })\r\n        }\r\n      } catch (error) {\r\n        console.log(error);\r\n      }\r\n    });\r\n  }\r\n\r\n  async getAllRejectedOrders(date?: { start: any; end: any; }) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        let loginId = await this.storage.get('uid')\r\n        let userRole = await this.storage.get('userRole')\r\n        if (userRole == 'vendor') {\r\n          this.allRejectedOrders = this.afs.collection('orders', ref => ref\r\n            .orderBy('createdAt', 'desc').where(\"status\", 'in', ['Rejected']).where('vendorId', '==', loginId)).snapshotChanges().pipe(\r\n              map(actions => actions.map(a => {\r\n                const data: any = a.payload.doc.data();\r\n                const id = a.payload.doc.id;\r\n                return { id, ...data };\r\n              }))\r\n            ).pipe(first()).toPromise();\r\n        }\r\n        else {\r\n          let allOrders = [];\r\n          let ordersData: AngularFirestoreCollection<unknown>;\r\n          if (date && date.start) {\r\n            ordersData = await this.afs.collection('orders', ref => ref.orderBy('createdAt', 'desc').where(\"status\", 'in', ['Rejected']).startAt(date.start).endAt(date.end));\r\n          } else {\r\n            ordersData = await this.afs.collection('orders', ref => ref.orderBy('createdAt', 'desc').where(\"status\", 'in', ['Rejected']));\r\n          }\r\n          let allOrdersRef: Subscription = ordersData.get().subscribe((querySnapshot: any) => {\r\n            querySnapshot.forEach((doc: { id: any; data: () => any; }) => {\r\n              allOrders.push({ id: doc.id, ...doc.data() })\r\n            });\r\n            resolve(allOrders)\r\n            allOrdersRef.unsubscribe()\r\n          })\r\n        }\r\n      } catch (error) {\r\n        console.log(error);\r\n      }\r\n    });\r\n  }\r\n\r\n  async getAllReturnedOrders(date?: { start: any; end: any; }) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        let loginId = await this.storage.get('uid')\r\n        let userRole = await this.storage.get('userRole')\r\n        if (userRole == 'vendor') {\r\n          this.allReturnedOrders = this.afs.collection('orders', ref => ref\r\n            .orderBy('createdAt', 'desc')\r\n            .where(\"status\", '==', 'Returned').where('vendorId', '==', loginId)).snapshotChanges().pipe(\r\n              map(actions => actions.map(a => {\r\n                const data: any = a.payload.doc.data();\r\n                const id = a.payload.doc.id;\r\n                return { id, ...data };\r\n              }))\r\n            ).pipe(first()).toPromise();\r\n        }\r\n        else {\r\n          let allOrders = [];\r\n          let ordersData: AngularFirestoreCollection<unknown>;\r\n          if (date && date.start) {\r\n            ordersData = await this.afs.collection('orders', ref => ref.orderBy('createdAt', 'desc').where(\"status\", '==', 'Returned').startAt(date.start).endAt(date.end));\r\n          } else {\r\n            ordersData = await this.afs.collection('orders', ref => ref.orderBy('createdAt', 'desc').where(\"status\", '==', 'Returned'));\r\n          }\r\n          let allOrdersRef: Subscription = ordersData.get().subscribe((querySnapshot: any) => {\r\n            querySnapshot.forEach((doc: { id: any; data: () => any; }) => {\r\n              allOrders.push({ id: doc.id, ...doc.data() })\r\n            });\r\n            resolve(allOrders)\r\n            allOrdersRef.unsubscribe()\r\n          })\r\n        }\r\n      } catch (error) {\r\n        console.log(error);\r\n      }\r\n    });\r\n  }\r\n\r\n  async getAllPaymentPendingOrders(date?: { start: any; end: any; }) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        let loginId = await this.storage.get('uid')\r\n        let userRole = await this.storage.get('userRole')\r\n        if (userRole == 'vendor') {\r\n          this.allReturnedOrders = this.afs.collection('orders', ref => ref\r\n            .orderBy('createdAt', 'desc')\r\n            .where(\"status\", '==', 'Returned').where('vendorId', '==', loginId)).snapshotChanges().pipe(\r\n              map(actions => actions.map(a => {\r\n                const data: any = a.payload.doc.data();\r\n                const id = a.payload.doc.id;\r\n                return { id, ...data };\r\n              }))\r\n            ).pipe(first()).toPromise();\r\n        }\r\n        else {\r\n          let allOrders = [];\r\n          let ordersData: AngularFirestoreCollection<unknown>;\r\n          if (date && date.start) {\r\n            ordersData = await this.afs.collection('orders', ref => ref.orderBy('createdAt', 'desc').where(\"payment.completed\", '==', false).startAt(date.start).endAt(date.end));\r\n          } else {\r\n            ordersData = await this.afs.collection('orders', ref => ref.orderBy('createdAt', 'desc').where(\"payment.completed\", '==', false));\r\n          }\r\n          let allOrdersRef: Subscription = ordersData.get().subscribe((querySnapshot: any) => {\r\n            querySnapshot.forEach((doc: { id: any; data: () => any; }) => {\r\n              allOrders.push({ id: doc.id, ...doc.data() })\r\n            });\r\n            resolve(allOrders)\r\n            allOrdersRef.unsubscribe()\r\n          })\r\n        }\r\n      } catch (error) {\r\n        console.log(error);\r\n      }\r\n    });\r\n  }\r\n\r\n  async getAllDeliveryAgents() {\r\n    return new Promise(async (resolve) => {\r\n      try {\r\n        let deliveryAgents = []\r\n        const usersRef = await this.afs.collection('users', ref => ref.where('role', '==', 'deliveryAgent'))\r\n        usersRef.get().subscribe((snap) => {\r\n          snap.forEach((v) => {\r\n            deliveryAgents.push({ id: v.id, ...v.data()})\r\n          })\r\n        })\r\n        resolve(deliveryAgents)\r\n      } catch (error) {\r\n        console.log(error);\r\n      }\r\n    })\r\n  }\r\n\r\n  async updateOrder(orderId: number, agentId: string) {\r\n    return new Promise(async (resolve) => {\r\n      try {\r\n        const orderRef = this.afs.collection('orders', ref => ref.where('orderId', '==', orderId));\r\n        const orderData: any = await orderRef.snapshotChanges().pipe(\r\n          map(actions => actions.map(a => {\r\n            const data: any = a.payload.doc.data();\r\n            const id = a.payload.doc.id;\r\n            return { id, ...data };\r\n          }))\r\n        ).pipe(first()).toPromise();\r\n        let updateOrder = await this.afs.collection('orders').doc(orderData[0].id).update({ deliveryAgentId: agentId, deliveryStatus: 'notStarted' });\r\n        console.log('updated order', updateOrder)\r\n      } catch (error) {\r\n        console.log(error);\r\n      }\r\n    })\r\n  }\r\n\r\n  async getUserByRole(role: string, custom?: string) {\r\n    return new Promise(async (resolve) => {\r\n      try {\r\n        let allUsers = []\r\n        let userRef: AngularFirestoreCollection<unknown>\r\n        if (role === 'all') {\r\n          userRef = await this.afs.collection('users');\r\n        } else {\r\n          userRef = await this.afs.collection('users', ref => ref.where('role', '==', role));\r\n        }\r\n        let allUsersRef: Subscription = userRef.get().subscribe((querySnapshot: any) => {\r\n          querySnapshot.forEach((doc: { id: any; data: () => any; }) => {\r\n            if (custom === 'custom-justNumbers') {\r\n              allUsers.push(doc.data().phoneNo)\r\n            } else {\r\n              allUsers.push({ id: doc.id, ...doc.data() })\r\n            }\r\n          });\r\n          resolve(allUsers)\r\n          allUsersRef.unsubscribe()\r\n        })\r\n      } catch (error) {\r\n        console.log(error);\r\n        resolve([])\r\n      }\r\n    })\r\n  }\r\n\r\n  async getAllUsersCount() {\r\n    return new Promise(async (resolve) => {\r\n      try {\r\n        let totalUsers = 0\r\n        const UsersData = this.afs.collection('users')\r\n        let allUsersRef: Subscription = UsersData.get().subscribe((snap) => {\r\n          totalUsers = snap.size\r\n          resolve(totalUsers)\r\n          allUsersRef.unsubscribe()\r\n        })\r\n      } catch (err) {\r\n        console.dir(err);\r\n        resolve(0)\r\n      }\r\n    })\r\n  }\r\n\r\n  async addUserByAdmin(userDetails: any) {\r\n    return new Promise(async (resolve) => {\r\n      let addUserDetails = firebase.functions().httpsCallable('users-addUserByAdmin');\r\n    addUserDetails(userDetails).then(async (res) => {\r\n      if (res.data.status && res.data.status === 'success') {\r\n        console.log(`Successfully Added User - ${userDetails.name} : `, res.data)\r\n        resolve({status : res.data.status, data: userDetails})\r\n      } else {\r\n        console.log(`Failed To Add User - ${userDetails.name} : `, res.data)\r\n        resolve({status : res.data.status, data: userDetails})\r\n      }\r\n    });\r\n    })\r\n  }\r\n\r\n  async getAllFilters() {\r\n    return new Promise ( async (resolve) => {\r\n      try {\r\n        let allFilters = []\r\n        let filtersRef: AngularFirestoreCollection<unknown>\r\n        filtersRef = this.afs.collection('features').doc('filters').collection('list')\r\n        let allFiltersRef: Subscription = filtersRef.get().subscribe((querySnapshot: any) => {\r\n          querySnapshot.forEach((doc: { id: any; data: () => any; }) => {\r\n            if (doc.data().active) {\r\n              allFilters.push({name: doc.data().name, value: doc.data().values || []})\r\n            }\r\n          });\r\n          resolve(allFilters)\r\n          allFiltersRef.unsubscribe()\r\n        })\r\n      } catch (error) {\r\n        console.dir(error);\r\n        resolve(0)\r\n      }\r\n    } )\r\n  }\r\n\r\n}\r\n"],"sourceRoot":""}