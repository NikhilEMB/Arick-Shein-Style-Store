{"version":3,"sources":["./node_modules/ngx-autosize/fesm5/ngx-autosize.js","./src/app/pipes/application-pipes.module.ts","./src/app/pipes/date-ago.pipe.ts","./src/app/pipes/safe-item.pipe.ts"],"names":[],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAA+H;;AAE/H;AACA;AACA,cAAc,wGAAwG;AACtH;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA,SAAS,OAAO,wDAAU;AAC1B;AACA;AACA,CAAC;;AAED;AACA;AACA,cAAc,wGAAwG;AACtH;AACA,WAAW,EAAE;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,0DAAY;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,gBAAgB;AAChB;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA,wBAAwB;AACxB;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA,oBAAoB;AACpB;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA,uCAAuC,uBAAuB;AAC9D;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,EAAE;AACzB;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,EAAE;AACzB;AACA,uBAAuB,EAAE;AACzB;AACA;AACA,2BAA2B,EAAE;AAC7B;AACA,2BAA2B,EAAE;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,EAAE;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,EAAE;AAC7B;AACA,2BAA2B,EAAE;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,OAAO,uDAAS;AACzB;AACA,iBAAiB;AACjB;AACA;AACA,oDAAoD;AACpD,SAAS,OAAO,wDAAU,EAAE;AAC5B,SAAS,kBAAkB;AAC3B,SAAS,OAAO,oDAAM;AACtB,MAAM;AACN;AACA,mBAAmB,OAAO,mDAAK,EAAE;AACjC,qBAAqB,OAAO,mDAAK,uBAAuB;AACxD,mBAAmB,OAAO,mDAAK,EAAE;AACjC,oBAAoB,OAAO,mDAAK,EAAE;AAClC,wBA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","file":"default~admin-admin-home-admin-chat-admin-chat-module~chat-bot-chat-bot-module-es5.js","sourcesContent":["import { Injectable, EventEmitter, Directive, ElementRef, NgZone, Input, Output, HostListener, NgModule } from '@angular/core';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nvar WindowRef = /** @class */ (function () {\n    function WindowRef() {\n    }\n    Object.defineProperty(WindowRef.prototype, \"nativeWindow\", {\n        get: /**\n         * @return {?}\n         */\n        function () {\n            return window;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    WindowRef.decorators = [\n        { type: Injectable }\n    ];\n    return WindowRef;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nvar MAX_LOOKUP_RETRIES = 3;\nvar AutosizeDirective = /** @class */ (function () {\n    function AutosizeDirective(element, _window, _zone) {\n        this.element = element;\n        this._window = _window;\n        this._zone = _zone;\n        this.onlyGrow = false;\n        this.useImportant = false;\n        this.resized = new EventEmitter();\n        this.autosize = true;\n        this.retries = 0;\n        this._destroyed = false;\n        if (this.element.nativeElement.tagName !== 'TEXTAREA') {\n            this._findNestedTextArea();\n        }\n        else {\n            this.textAreaEl = this.element.nativeElement;\n            this.textAreaEl.style['overflow-y'] = 'hidden';\n            this._onTextAreaFound();\n        }\n    }\n    Object.defineProperty(AutosizeDirective.prototype, \"minRows\", {\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */\n        function (value) {\n            this._minRows = value;\n            if (this.textAreaEl) {\n                this.textAreaEl.rows = value;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    ;\n    Object.defineProperty(AutosizeDirective.prototype, \"_autosize\", {\n        set: /**\n         * @param {?} autosize\n         * @return {?}\n         */\n        function (autosize) {\n            this.autosize = typeof autosize === 'boolean'\n                ? autosize\n                : true;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    ;\n    /**\n     * @param {?} textArea\n     * @return {?}\n     */\n    AutosizeDirective.prototype.onInput = /**\n     * @param {?} textArea\n     * @return {?}\n     */\n    function (textArea) {\n        this.adjust();\n    };\n    /**\n     * @return {?}\n     */\n    AutosizeDirective.prototype.ngOnDestroy = /**\n     * @return {?}\n     */\n    function () {\n        this._destroyed = true;\n        if (this._windowResizeHandler) {\n            this._window.nativeWindow.removeEventListener('resize', this._windowResizeHandler, false);\n        }\n    };\n    /**\n     * @return {?}\n     */\n    AutosizeDirective.prototype.ngAfterContentChecked = /**\n     * @return {?}\n     */\n    function () {\n        this.adjust();\n    };\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    AutosizeDirective.prototype.ngOnChanges = /**\n     * @param {?} changes\n     * @return {?}\n     */\n    function (changes) {\n        this.adjust(true);\n    };\n    /**\n     * @return {?}\n     */\n    AutosizeDirective.prototype._findNestedTextArea = /**\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        this.textAreaEl = this.element.nativeElement.querySelector('TEXTAREA');\n        if (!this.textAreaEl && this.element.nativeElement.shadowRoot) {\n            this.textAreaEl = this.element.nativeElement.shadowRoot.querySelector('TEXTAREA');\n        }\n        if (!this.textAreaEl) {\n            if (this.retries >= MAX_LOOKUP_RETRIES) {\n                console.warn('ngx-autosize: textarea not found');\n            }\n            else {\n                this.retries++;\n                setTimeout((/**\n                 * @return {?}\n                 */\n                function () {\n                    _this._findNestedTextArea();\n                }), 100);\n            }\n            return;\n        }\n        this.textAreaEl.style['overflow-y'] = 'hidden';\n        this._onTextAreaFound();\n    };\n    /**\n     * @return {?}\n     */\n    AutosizeDirective.prototype._onTextAreaFound = /**\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        this._addWindowResizeHandler();\n        setTimeout((/**\n         * @return {?}\n         */\n        function () {\n            _this.adjust();\n        }));\n    };\n    /**\n     * @return {?}\n     */\n    AutosizeDirective.prototype._addWindowResizeHandler = /**\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        this._windowResizeHandler = Debounce((/**\n         * @return {?}\n         */\n        function () {\n            _this._zone.run((/**\n             * @return {?}\n             */\n            function () {\n                _this.adjust();\n            }));\n        }), 200);\n        this._zone.runOutsideAngular((/**\n         * @return {?}\n         */\n        function () {\n            _this._window.nativeWindow.addEventListener('resize', _this._windowResizeHandler, false);\n        }));\n    };\n    /**\n     * @param {?=} inputsChanged\n     * @return {?}\n     */\n    AutosizeDirective.prototype.adjust = /**\n     * @param {?=} inputsChanged\n     * @return {?}\n     */\n    function (inputsChanged) {\n        if (inputsChanged === void 0) { inputsChanged = false; }\n        if (this.autosize && !this._destroyed && this.textAreaEl && this.textAreaEl.parentNode) {\n            /** @type {?} */\n            var currentText = this.textAreaEl.value;\n            if (inputsChanged === false &&\n                currentText === this._oldContent &&\n                this.textAreaEl.offsetWidth === this._oldWidth) {\n                return;\n            }\n            this._oldContent = currentText;\n            this._oldWidth = this.textAreaEl.offsetWidth;\n            /** @type {?} */\n            var clone = this.textAreaEl.cloneNode(true);\n            /** @type {?} */\n            var parent_1 = this.textAreaEl.parentNode;\n            clone.style.width = this.textAreaEl.offsetWidth + 'px';\n            clone.style.visibility = 'hidden';\n            clone.style.position = 'absolute';\n            clone.textContent = currentText;\n            parent_1.appendChild(clone);\n            clone.style['overflow-y'] = 'hidden';\n            clone.style.height = 'auto';\n            /** @type {?} */\n            var height = clone.scrollHeight;\n            // add into height top and bottom borders' width\n            /** @type {?} */\n            var computedStyle = this._window.nativeWindow.getComputedStyle(clone, null);\n            height += parseInt(computedStyle.getPropertyValue('border-top-width'));\n            height += parseInt(computedStyle.getPropertyValue('border-bottom-width'));\n            // add into height top and bottom paddings width\n            height += parseInt(computedStyle.getPropertyValue('padding-top'));\n            height += parseInt(computedStyle.getPropertyValue('padding-bottom'));\n            /** @type {?} */\n            var oldHeight = this.textAreaEl.offsetHeight;\n            /** @type {?} */\n            var willGrow = height > oldHeight;\n            if (this.onlyGrow === false || willGrow) {\n                /** @type {?} */\n                var lineHeight = this._getLineHeight();\n                /** @type {?} */\n                var rowsCount = height / lineHeight;\n                if (this._minRows && this._minRows >= rowsCount) {\n                    height = this._minRows * lineHeight;\n                }\n                else if (this.maxRows && this.maxRows <= rowsCount) {\n                    // never shrink the textarea if onlyGrow is true\n                    /** @type {?} */\n                    var maxHeight = this.maxRows * lineHeight;\n                    height = this.onlyGrow ? Math.max(maxHeight, oldHeight) : maxHeight;\n                    this.textAreaEl.style['overflow-y'] = 'auto';\n                }\n                else {\n                    this.textAreaEl.style['overflow-y'] = 'hidden';\n                }\n                /** @type {?} */\n                var heightStyle = height + 'px';\n                /** @type {?} */\n                var important = this.useImportant ? 'important' : '';\n                this.textAreaEl.style.setProperty('height', heightStyle, important);\n                this.resized.emit(height);\n            }\n            parent_1.removeChild(clone);\n        }\n    };\n    /**\n     * @private\n     * @return {?}\n     */\n    AutosizeDirective.prototype._getLineHeight = /**\n     * @private\n     * @return {?}\n     */\n    function () {\n        /** @type {?} */\n        var lineHeight = parseInt(this.textAreaEl.style.lineHeight, 10);\n        if (isNaN(lineHeight) && this._window.nativeWindow.getComputedStyle) {\n            /** @type {?} */\n            var styles = this._window.nativeWindow.getComputedStyle(this.textAreaEl);\n            lineHeight = parseInt(styles.lineHeight, 10);\n        }\n        if (isNaN(lineHeight)) {\n            /** @type {?} */\n            var fontSize = this._window.nativeWindow.getComputedStyle(this.textAreaEl, null).getPropertyValue('font-size');\n            lineHeight = Math.floor(parseInt(fontSize.replace('px', ''), 10) * 1.5);\n        }\n        return lineHeight;\n    };\n    AutosizeDirective.decorators = [\n        { type: Directive, args: [{\n                    selector: '[autosize]'\n                },] }\n    ];\n    /** @nocollapse */\n    AutosizeDirective.ctorParameters = function () { return [\n        { type: ElementRef },\n        { type: WindowRef },\n        { type: NgZone }\n    ]; };\n    AutosizeDirective.propDecorators = {\n        minRows: [{ type: Input }],\n        _autosize: [{ type: Input, args: ['autosize',] }],\n        maxRows: [{ type: Input }],\n        onlyGrow: [{ type: Input }],\n        useImportant: [{ type: Input }],\n        resized: [{ type: Output }],\n        onInput: [{ type: HostListener, args: ['input', ['$event.target'],] }]\n    };\n    return AutosizeDirective;\n}());\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    AutosizeDirective.prototype._minRows;\n    /** @type {?} */\n    AutosizeDirective.prototype.maxRows;\n    /** @type {?} */\n    AutosizeDirective.prototype.onlyGrow;\n    /** @type {?} */\n    AutosizeDirective.prototype.useImportant;\n    /** @type {?} */\n    AutosizeDirective.prototype.resized;\n    /**\n     * @type {?}\n     * @private\n     */\n    AutosizeDirective.prototype.autosize;\n    /**\n     * @type {?}\n     * @private\n     */\n    AutosizeDirective.prototype.retries;\n    /**\n     * @type {?}\n     * @private\n     */\n    AutosizeDirective.prototype.textAreaEl;\n    /**\n     * @type {?}\n     * @private\n     */\n    AutosizeDirective.prototype._oldContent;\n    /**\n     * @type {?}\n     * @private\n     */\n    AutosizeDirective.prototype._oldWidth;\n    /**\n     * @type {?}\n     * @private\n     */\n    AutosizeDirective.prototype._windowResizeHandler;\n    /**\n     * @type {?}\n     * @private\n     */\n    AutosizeDirective.prototype._destroyed;\n    /** @type {?} */\n    AutosizeDirective.prototype.element;\n    /**\n     * @type {?}\n     * @private\n     */\n    AutosizeDirective.prototype._window;\n    /**\n     * @type {?}\n     * @private\n     */\n    AutosizeDirective.prototype._zone;\n    /* Skipping unhandled member: ;*/\n    /* Skipping unhandled member: ;*/\n}\n/**\n * @param {?} func\n * @param {?} wait\n * @param {?=} immediate\n * @return {?}\n */\nfunction Debounce(func, wait, immediate) {\n    if (immediate === void 0) { immediate = false; }\n    /** @type {?} */\n    var timeout;\n    return (/**\n     * @return {?}\n     */\n    function () {\n        /** @type {?} */\n        var context = this;\n        /** @type {?} */\n        var args = arguments;\n        /** @type {?} */\n        var later = (/**\n         * @return {?}\n         */\n        function () {\n            timeout = null;\n            if (!immediate) {\n                func.apply(context, args);\n            }\n        });\n        /** @type {?} */\n        var callNow = immediate && !timeout;\n        clearTimeout(timeout);\n        timeout = setTimeout(later, wait);\n        if (callNow) {\n            func.apply(context, args);\n        }\n    });\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nvar AutosizeModule = /** @class */ (function () {\n    function AutosizeModule() {\n    }\n    AutosizeModule.decorators = [\n        { type: NgModule, args: [{\n                    declarations: [AutosizeDirective],\n                    imports: [],\n                    providers: [\n                        WindowRef\n                    ],\n                    exports: [AutosizeDirective]\n                },] }\n    ];\n    return AutosizeModule;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nexport { AutosizeDirective, AutosizeModule, WindowRef as ɵa };\n//# sourceMappingURL=ngx-autosize.js.map\n","import { DateAgoPipe } from './date-ago.pipe';\r\nimport { NgModule } from '@angular/core';\r\nimport { SafeItemPipe } from './safe-item.pipe';\r\n\r\n@NgModule({\r\n  imports: [\r\n  ],\r\n  declarations: [ \r\n    DateAgoPipe, \r\n    SafeItemPipe\r\n  ],\r\n  exports: [\r\n    DateAgoPipe,\r\n    SafeItemPipe\r\n  ]\r\n})\r\nexport class ApplicationPipesModule {}","import {Pipe, PipeTransform} from '@angular/core';\r\n\r\n@Pipe({\r\n    name: 'dateAgo',\r\n    pure: true\r\n})\r\nexport class DateAgoPipe implements PipeTransform {\r\n\r\n    transform(value: any, args?: any): any {\r\n        if (value) {\r\n            const seconds = Math.floor((+new Date() - +new Date(value)) / 1000);\r\n            if (seconds < 29) // less than 30 seconds ago will show as 'Just now'\r\n                return 'Just now';\r\n            const intervals = {\r\n                'year': 31536000,\r\n                'month': 2592000,\r\n                'week': 604800,\r\n                'day': 86400,\r\n                'hour': 3600,\r\n                'minute': 60,\r\n                'second': 1\r\n            };\r\n            let counter;\r\n            for (const i in intervals) {\r\n                counter = Math.floor(seconds / intervals[i]);\r\n                if (counter > 0)\r\n                    if (counter === 1) {\r\n                        return counter + ' ' + i + ' ago'; // singular (1 day ago)\r\n                    } else {\r\n                        return counter + ' ' + i + 's ago'; // plural (2 days ago)\r\n                    }\r\n            }\r\n        }\r\n        return value;\r\n    }\r\n\r\n}","import { Pipe, PipeTransform } from '@angular/core';\r\nimport { DomSanitizer, SafeHtml, SafeResourceUrl, SafeScript, SafeStyle, SafeUrl } from '@angular/platform-browser';\r\n\r\n@Pipe({\r\n  name: 'safeItem'\r\n})\r\nexport class SafeItemPipe implements PipeTransform {\r\n  constructor(public sanitizer: DomSanitizer) { }\r\n\r\n  transform(value: any, type: string): SafeHtml | SafeStyle | SafeScript | SafeUrl | SafeResourceUrl {\r\n    if (!value) return value;\r\n    switch (type) {\r\n      case 'html':\r\n        return this.sanitizer.bypassSecurityTrustHtml(value);\r\n      case 'style':\r\n        return this.sanitizer.bypassSecurityTrustStyle(value);\r\n      case 'script':\r\n        return this.sanitizer.bypassSecurityTrustScript(value);\r\n      case 'url':\r\n        return this.sanitizer.bypassSecurityTrustUrl(value);\r\n      case 'resourceUrl':\r\n        return this.sanitizer.bypassSecurityTrustResourceUrl(value);\r\n      default:\r\n        throw new Error(`Invalid safe type specified: ${type}`);\r\n    }\r\n  }\r\n\r\n}\r\n"],"sourceRoot":""}